shaco=~/shaco CD=. filter="Makefile README.md *.lua *.py *.h *.c" {
 Makefile
 README.md
 config_auth.lua
 config_base.lua
 config_benchmark.lua
 config_bmdb.lua
 config_center.lua
 config_echo.lua
 config_gate.lua
 config_gateload.lua
 config_hall.lua
 config_match.lua
 config_room.lua
 config_route.lua
 config_rpacc.lua
 config_rprank.lua
 config_rpuser.lua
 config_uniqueol.lua
 config_watchdog.lua
 config_robot.lua
 libshaco=libshaco{
  dlmodule.c
  sc_check.c
  sc_env.c
  sc_init.c
  sc_log.c
  sc_net.c
  sc_node.c
  sc_reload.c
  sc_service.c
  sc_sig.c
  sc_start.c
  sc_timer.c
  sh_hash.c
  sh_monitor.c
  sh_util.c
 }
 include=include{
  libshaco=libshaco{
   dlmodule.h
   sc.h
   sc_env.h
   sc_init.h
   sc_log.h
   sc_net.h
   sc_node.h
   sc_reload.h
   sc_service.h
   sc_timer.h
   sh_hash.h
   sh_monitor.h
   sh_util.h
  }
 }
 lur=lur{
  lur.h
  lur.c
 }
 base=base{
  args.h
  array.h
  freeid.h
  freelist.h
  gfreeid.h
  hashid.h
  hmap.h
  map.h
  memrw.h
  mpool.h
  stringsplice.h
  stringtable.h
  util.h
  args.c
  hmap.c
  map.c
  mpool.c
 }
 net=net{
  net.h
  net_message.h
  netbuf.h
  netpoll.h
  socket.h
  socket_epoll.h
  socket_select.h
  net.c
  netbuf.c
 }
 redis=redis{
  redis.h
  redis.c
 }
 cnet=cnet{
  cnet.h
  cnet.c
 }
 service=service{
  cmdctl.h
  service_auth.c
  service_benchmark.c
  service_benchmarkdb.c
  service_centers.c
  service_cmdctl.c
  service_cmds.c
  service_echo.c
  service_gate.c
  service_hall.c
  service_loadbalance.c
  service_log.c
  service_match.c
  service_node.c
  service_rank.c
  service_redisproxy.c
  service_robot.c
  service_room.c
  service_route.c
  service_tplthall.c
  service_tpltroom.c
  service_uniqueol.c
  service_watchdog.c
 }
 hall=hall{
  attrilogic.h
  awardlogic.h
  hall.h
  player.h
  playerdb.h
  playlogic.h
  ringlogic.h
  rolelogic.h
  attrilogic.c
  awardlogic.c
  player.c
  playerdb.c
  playlogic.c
  ringlogic.c
  rolelogic.c
 }
 game=game{
  buff.h
  fight.h
  genmap.h
  mapdatamgr.h
  roommap.h
  fight.c
  genmap.c
  mapdatamgr.c
  roommap.c
 }
 message=message{
  cli_message.h
  client_type.h
  message.h
  message_helper.h
  message_reader.h
  node_type.h
  sharetype.h
  user_message.h
 }
 datadefine=datadefine{
 }
 tplt=tplt{
  tplt.h
  tplt_holder.h
  tplt_include.h
  tplt_internal.h
  tplt_visitor.h
  tplt_visitor_ops.h
  tplt_visitor_ops_implement.h
  tplt.c
  tplt_holder.c
  tplt_visitor.c
  tplt_visitor_ops_implement.c
 }
 elog=elog{
  elog.h
  elog_appender.h
  elog_appender_file.h
  elog_appender_rollfile.h
  elog_include.h
  elog_internal.h
  elog.c
  elog_appender_file.c
  elog_appender_rollfile.c
 }
 tool=tool{
  commandd.lua
  pathconfig.lua
  concat.py
  convert_excel.py
  service_tmp.c
  shaco-cli.c
  excelto=excelto{
   exconvertor.py
   exparser.py
   toc_opt.py
   tolua_opt.py
   tolualine_opt.py
   tomap_opt.py
   totbl_opt.py
   toxml_opt.py
  }
 }
 main=main{
  robot.h
  robot.c
  shaco.c
  test.c
  testclient.c
 }
 web=web{
  rank.lua
 }
}

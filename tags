!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARGS_BUF	./base/args.h	6;"	d	language:C++
ARGS_MAX	./base/args.h	7;"	d	language:C++
C	./host/host_reload.c	/^static struct reload_cache* C = NULL;$/;"	v	language:C	typeref:struct:reload_cache
CACHE_MAX	./host/host_reload.c	6;"	d	language:C
CLI_CMD	./service/client_type.h	8;"	d	language:C++
CLI_GAME	./service/client_type.h	9;"	d	language:C++
CLI_TRUST	./service/client_type.h	6;"	d	language:C++
CLI_UNTRUST	./service/client_type.h	7;"	d	language:C++
COMMAND_MAP	./service/service_cmdctl.c	/^static struct command COMMAND_MAP[] = {$/;"	v	language:C	typeref:struct:command
G	./host/host_gate.c	/^static struct gate* G = NULL;$/;"	v	language:C	typeref:struct:gate
H	./host/host.c	/^static struct host* H = NULL;$/;"	v	language:C	typeref:struct:host
HMSGT_HOST	./host/host_message.h	4;"	d	language:C++
HMSGT_USER	./host/host_message.h	5;"	d	language:C++
HNODESTR_MAX	./host/host_node.h	26;"	d	language:C++
HNODE_ID	./host/host_node.h	28;"	d	language:C++
HNODE_MAX	./host/host_node.h	31;"	d	language:C++
HNODE_NAME_MAX	./host/host_node.h	25;"	d	language:C++
HNODE_SID	./host/host_node.h	30;"	d	language:C++
HNODE_SID_MAX	./host/host_node.h	23;"	d	language:C++
HNODE_TID	./host/host_node.h	29;"	d	language:C++
HNODE_TID_MAX	./host/host_node.h	24;"	d	language:C++
ID	./test/test.c	/^struct ID {$/;"	s	language:C
ID::__anon2::__anon3::sid	./test/test.c	/^            uint16_t sid:10;$/;"	m	language:C	struct:ID::__anon2::__anon3	access:public
ID::__anon2::__anon3::tid	./test/test.c	/^            uint16_t tid:6;$/;"	m	language:C	struct:ID::__anon2::__anon3	access:public
ID::__anon2::id	./test/test.c	/^        uint16_t id;$/;"	m	language:C	union:ID::__anon2	access:public
INIT_COUNT	./host/host_service.c	9;"	d	language:C
INIT_EVENTS	./host/host_timer.c	8;"	d	language:C
L	./lur/lur.c	/^    lua_State* L;$/;"	m	language:C	struct:lur	access:public
LISTEN_BACKLOG	./net/net.c	17;"	d	language:C
LOGOUT_FULL	./message/cli_message.h	46;"	d	language:C++
LOGOUT_NOLOGIN	./message/cli_message.h	48;"	d	language:C++
LOGOUT_NORMAL	./message/cli_message.h	43;"	d	language:C++
LOGOUT_RELOGIN	./message/cli_message.h	47;"	d	language:C++
LOGOUT_SOCKERR	./message/cli_message.h	45;"	d	language:C++
LOGOUT_TIMEOUT	./message/cli_message.h	44;"	d	language:C++
LOG_DEBUG	./host/host_log.h	4;"	d	language:C++
LOG_ERROR	./host/host_log.h	7;"	d	language:C++
LOG_INFO	./host/host_log.h	5;"	d	language:C++
LOG_MAX	./host/host_log.h	8;"	d	language:C++
LOG_WARNING	./host/host_log.h	6;"	d	language:C++
LUR_OK	./lur/lur.h	4;"	d	language:C++
N	./host/host_net.c	/^static struct net* N = NULL;$/;"	v	language:C	typeref:struct:net
N	./host/host_node.c	/^static struct _node_holder* N = NULL;$/;"	v	language:C	typeref:struct:_node_holder
N	./net/test.c	/^static struct net* N = NULL;$/;"	v	language:C	typeref:struct:net
NAME_MAX	./message/sharetype.h	7;"	d	language:C++
NETE_ACCEPT	./net/net_message.h	8;"	d	language:C++
NETE_CONNECT	./net/net_message.h	9;"	d	language:C++
NETE_CONNERR	./net/net_message.h	10;"	d	language:C++
NETE_CONN_THEN_READ	./net/net_message.h	13;"	d	language:C++
NETE_INVALID	./net/net_message.h	6;"	d	language:C++
NETE_READ	./net/net_message.h	7;"	d	language:C++
NETE_SOCKERR	./net/net_message.h	11;"	d	language:C++
NETE_TIMEOUT	./net/net_message.h	14;"	d	language:C++
NET_ERR_CREATESOCK	./net/net.c	23;"	d	language:C
NET_ERR_MSG	./net/net.c	21;"	d	language:C
NET_ERR_NOSOCK	./net/net.c	22;"	d	language:C
NET_RABLE	./net/netpoll.h	6;"	d	language:C++
NET_WABLE	./net/netpoll.h	7;"	d	language:C++
NODE_CENTER	./service/node_type.h	9;"	d	language:C++
NODE_GAME	./service/node_type.h	12;"	d	language:C++
NODE_GATE	./service/node_type.h	10;"	d	language:C++
NODE_NAMES	./service/node_type.h	/^const char* NODE_NAMES[NODE_TYPE_MAX] = {$/;"	v	language:C++
NODE_TYPE_MAX	./service/node_type.h	13;"	d	language:C++
NODE_TYPE_MIN	./service/node_type.h	8;"	d	language:C++
NODE_WORLD	./service/node_type.h	11;"	d	language:C++
NODE_header	./message/message.h	/^struct NODE_header {$/;"	s	language:C++
NODE_header::_NODE_header	./message/message.h	/^    _NODE_header;$/;"	m	language:C++	struct:NODE_header	access:public
OK	./net/net.c	20;"	d	language:C
PH	./world/player.c	/^static struct player_holder* PH = NULL;$/;"	v	language:C	typeref:struct:player_holder
PLAY_LOADING_TIMEOUT	./message/cli_message.h	77;"	d	language:C++
PLAY_UNJOIN_T	./message/cli_message.h	/^enum PLAY_UNJOIN_T {$/;"	g	language:C++
PS_FREE	./world/player.h	7;"	d	language:C++
PS_GAME	./world/player.h	9;"	d	language:C++
PS_LOGIN	./world/player.h	8;"	d	language:C++
PUNJOIN_LEAVE	./message/cli_message.h	/^    PUNJOIN_LEAVE = 1,$/;"	e	language:C++	enum:PLAY_UNJOIN_T
PUNJOIN_OVER	./message/cli_message.h	/^    PUNJOIN_OVER = 2,$/;"	e	language:C++	enum:PLAY_UNJOIN_T
R	./host/host_remote.c	/^static remote_holder* R = NULL;$/;"	v	language:C
RDBUFFER_SIZE	./host/host_net.c	10;"	d	language:C
REMOTE_MAX	./host/host_remote.c	4;"	d	language:C
ROOM_TYPE1	./message/sharetype.h	14;"	d	language:C++
ROOM_TYPE2	./message/sharetype.h	15;"	d	language:C++
RW_CUR	./base/memrw.h	14;"	d	language:C++
RW_EMPTY	./base/memrw.h	13;"	d	language:C++
RW_SPACE	./base/memrw.h	12;"	d	language:C++
R_ARGINVALID	./service/service_cmdctl.c	19;"	d	language:C
R_ARGLESS	./service/service_cmdctl.c	18;"	d	language:C
R_FAIL	./service/service_cmdctl.c	17;"	d	language:C
R_NOCOMMAND	./service/service_cmdctl.c	16;"	d	language:C
R_OK	./service/service_cmdctl.c	15;"	d	language:C
S	./host/host_service.c	/^static struct service_holder* S = NULL;$/;"	v	language:C	typeref:struct:service_holder
SEAGAIN	./net/socket.h	31;"	d	language:C++
SEAGAIN	./net/socket.h	35;"	d	language:C++
SECONNECTING	./net/socket.h	32;"	d	language:C++
SECONNECTING	./net/socket.h	36;"	d	language:C++
SEINTR	./net/socket.h	30;"	d	language:C++
SEINTR	./net/socket.h	34;"	d	language:C++
SERVER	./net/test.c	/^static int SERVER = -1;$/;"	v	language:C
SERVICE_HOST	./host/host_service.h	8;"	d	language:C++
SERVICE_INVALID	./host/host_service.h	7;"	d	language:C++
SERVICE_SELF	./host/host_service.h	10;"	d	language:C++
SOCKET_INVALID	./net/socket.h	21;"	d	language:C++
SOCKET_INVALID	./net/socket.h	25;"	d	language:C++
STATUS_CONNECTED	./net/net.c	13;"	d	language:C
STATUS_CONNECTING	./net/net.c	12;"	d	language:C
STATUS_INVALID	./net/net.c	10;"	d	language:C
STATUS_LISTENING	./net/net.c	11;"	d	language:C
STATUS_OPENED	./net/net.c	15;"	d	language:C
STATUS_SUSPEND	./net/net.c	14;"	d	language:C
STRERROR	./net/net.c	/^static const char* STRERROR[] = {$/;"	v	language:C
STRERROR	./service/service_cmdctl.c	/^static const char* STRERROR[] = {$/;"	v	language:C
STR_LEVELS	./host/host_log.c	/^static const char* STR_LEVELS[LOG_MAX] = {$/;"	v	language:C
SUBSCRIBE_MSG	./host/host_dispatcher.h	6;"	d	language:C++
T	./host/host_timer.c	/^static struct host_timer* T = NULL;$/;"	v	language:C	typeref:struct:host_timer
Test	./test/test.c	/^struct Test {$/;"	s	language:C
Test::__anon1::i	./test/test.c	/^        int i;$/;"	m	language:C	struct:Test::__anon1	access:public
Test::v	./test/test.c	/^    }v [3];$/;"	m	language:C	struct:Test	typeref:struct:Test::__anon1	access:public
UMID_CBEGIN	./message/cli_message.h	8;"	d	language:C++
UMID_CEND	./message/cli_message.h	9;"	d	language:C++
UMID_CHARINFO	./message/cli_message.h	15;"	d	language:C++
UMID_CMD_REQ	./message/user_message.h	16;"	d	language:C++
UMID_CMD_RES	./message/user_message.h	17;"	d	language:C++
UMID_CREATEROOM	./message/user_message.h	20;"	d	language:C++
UMID_DESTORYROOM	./message/user_message.h	21;"	d	language:C++
UMID_FORWARD	./message/user_message.h	18;"	d	language:C++
UMID_HEARTBEAT	./message/cli_message.h	11;"	d	language:C++
UMID_INVALID	./message/message.h	9;"	d	language:C++
UMID_LOGIN	./message/cli_message.h	12;"	d	language:C++
UMID_LOGINFAIL	./message/cli_message.h	13;"	d	language:C++
UMID_LOGOUT	./message/cli_message.h	14;"	d	language:C++
UMID_MAX	./message/message.h	8;"	d	language:C++
UMID_NBEGIN	./message/user_message.h	9;"	d	language:C++
UMID_NEND	./message/user_message.h	10;"	d	language:C++
UMID_NODE_NOTIFY	./message/user_message.h	15;"	d	language:C++
UMID_NODE_REG	./message/user_message.h	12;"	d	language:C++
UMID_NODE_REGOK	./message/user_message.h	13;"	d	language:C++
UMID_NODE_SUB	./message/user_message.h	14;"	d	language:C++
UMID_PLAY	./message/cli_message.h	17;"	d	language:C++
UMID_PLAYBEGIN	./message/cli_message.h	21;"	d	language:C++
UMID_PLAYDONE	./message/cli_message.h	24;"	d	language:C++
UMID_PLAYFAIL	./message/cli_message.h	18;"	d	language:C++
UMID_PLAYJOIN	./message/cli_message.h	22;"	d	language:C++
UMID_PLAYLOADING	./message/cli_message.h	20;"	d	language:C++
UMID_PLAYUNJOIN	./message/cli_message.h	23;"	d	language:C++
UMID_PLAYWAIT	./message/cli_message.h	19;"	d	language:C++
UM_CAST	./message/message.h	49;"	d	language:C++
UM_CLIMAX	./message/user_message.h	77;"	d	language:C++
UM_DEF	./message/message.h	34;"	d	language:C++
UM_DEFFIX	./message/message.h	38;"	d	language:C++
UM_DEFVAR	./message/message.h	43;"	d	language:C++
UM_FORWARD	./message/user_message.h	78;"	d	language:C++
UM_HSIZE	./message/message.h	32;"	d	language:C++
UM_MAXSIZE	./message/message.h	7;"	d	language:C++
UM_SEND	./message/user_message.h	99;"	d	language:C++
UM_SENDFORWARD	./message/user_message.h	/^UM_SENDFORWARD(int id, struct UM_forward* fw) {$/;"	f	language:C++	signature:(int id, struct UM_forward* fw)
UM_SENDTOCLI	./message/user_message.h	104;"	d	language:C++
UM_SENDTONID	./message/user_message.h	/^UM_SENDTONID(uint16_t tid, uint16_t sid, void* msg, int sz) {$/;"	f	language:C++	signature:(uint16_t tid, uint16_t sid, void* msg, int sz)
UM_SENDTONODE	./message/user_message.h	/^UM_SENDTONODE(const struct host_node* hn, void* msg, int sz) {$/;"	f	language:C++	signature:(const struct host_node* hn, void* msg, int sz)
UM_SENDTOPLAYER	./service/worldhelper.h	/^UM_SENDTOPLAYER(struct player* pl, struct UM_forward* fw) {$/;"	f	language:C++	signature:(struct player* pl, struct UM_forward* fw)
UM_SENDTOSVR	./message/user_message.h	108;"	d	language:C++
UM_SKIP	./message/message.h	31;"	d	language:C++
UM_base	./message/message.h	/^struct UM_base {$/;"	s	language:C++
UM_base::_UM_header	./message/message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_base	access:public
UM_base::data	./message/message.h	/^    uint8_t data[0];$/;"	m	language:C++	struct:UM_base	access:public
UM_charinfo	./message/cli_message.h	/^struct UM_charinfo {$/;"	s	language:C++
UM_charinfo::_UM_header	./message/cli_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_charinfo	access:public
UM_charinfo::data	./message/cli_message.h	/^    struct chardata data;$/;"	m	language:C++	struct:UM_charinfo	typeref:struct:UM_charinfo::chardata	access:public
UM_cmd_req	./message/user_message.h	/^struct UM_cmd_req {$/;"	s	language:C++
UM_cmd_req::_UM_header	./message/user_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_cmd_req	access:public
UM_cmd_req::cid	./message/user_message.h	/^    int32_t cid;$/;"	m	language:C++	struct:UM_cmd_req	access:public
UM_cmd_req::cmd	./message/user_message.h	/^    char cmd[0];$/;"	m	language:C++	struct:UM_cmd_req	access:public
UM_cmd_res	./message/user_message.h	/^struct UM_cmd_res {$/;"	s	language:C++
UM_cmd_res::_UM_header	./message/user_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_cmd_res	access:public
UM_cmd_res::cid	./message/user_message.h	/^    int32_t cid;$/;"	m	language:C++	struct:UM_cmd_res	access:public
UM_cmd_res::str	./message/user_message.h	/^    char str[0];$/;"	m	language:C++	struct:UM_cmd_res	access:public
UM_createroom	./message/user_message.h	/^struct UM_createroom {$/;"	s	language:C++
UM_createroom::_UM_header	./message/user_message.h	/^    _UM_header; $/;"	m	language:C++	struct:UM_createroom	access:public
UM_createroom::key	./message/user_message.h	/^    uint32_t key; \/\/ key of room$/;"	m	language:C++	struct:UM_createroom	access:public
UM_createroom::type	./message/user_message.h	/^    int8_t type;  \/\/ see ROOM_TYPE*$/;"	m	language:C++	struct:UM_createroom	access:public
UM_destroyroom	./message/user_message.h	/^struct UM_destroyroom {$/;"	s	language:C++
UM_destroyroom::_UM_header	./message/user_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_destroyroom	access:public
UM_destroyroom::type	./message/user_message.h	/^    int8_t type;  \/\/ sess ROOM_TYPE*$/;"	m	language:C++	struct:UM_destroyroom	access:public
UM_forward	./message/user_message.h	/^struct UM_forward {$/;"	s	language:C++
UM_forward::_UM_header	./message/user_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_forward	access:public
UM_forward::cid	./message/user_message.h	/^    int32_t cid;$/;"	m	language:C++	struct:UM_forward	access:public
UM_forward::wrap	./message/user_message.h	/^    struct UM_base wrap;$/;"	m	language:C++	struct:UM_forward	typeref:struct:UM_forward::UM_base	access:public
UM_forward_size	./message/user_message.h	/^UM_forward_size(struct UM_forward* um) {$/;"	f	language:C++	signature:(struct UM_forward* um)
UM_heartbeat	./message/cli_message.h	/^struct UM_heartbeat {$/;"	s	language:C++
UM_heartbeat::_UM_header	./message/cli_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_heartbeat	access:public
UM_login	./message/cli_message.h	/^struct UM_login {$/;"	s	language:C++
UM_login::_UM_header	./message/cli_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_login	access:public
UM_loginfail	./message/cli_message.h	/^struct UM_loginfail {$/;"	s	language:C++
UM_loginfail::_UM_header	./message/cli_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_loginfail	access:public
UM_loginfail::error	./message/cli_message.h	/^    int8_t error;$/;"	m	language:C++	struct:UM_loginfail	access:public
UM_logout	./message/cli_message.h	/^struct UM_logout {$/;"	s	language:C++
UM_logout::_UM_header	./message/cli_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_logout	access:public
UM_logout::type	./message/cli_message.h	/^    int8_t type;$/;"	m	language:C++	struct:UM_logout	access:public
UM_node_notify	./message/user_message.h	/^struct UM_node_notify {$/;"	s	language:C++
UM_node_notify::_UM_header	./message/user_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_node_notify	access:public
UM_node_notify::addr	./message/user_message.h	/^    uint32_t addr;$/;"	m	language:C++	struct:UM_node_notify	access:public
UM_node_notify::port	./message/user_message.h	/^    uint16_t port;$/;"	m	language:C++	struct:UM_node_notify	access:public
UM_node_notify::tnodeid	./message/user_message.h	/^    uint16_t tnodeid;$/;"	m	language:C++	struct:UM_node_notify	access:public
UM_node_reg	./message/user_message.h	/^struct UM_node_reg {$/;"	s	language:C++
UM_node_reg::_UM_header	./message/user_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_node_reg	access:public
UM_node_reg::addr	./message/user_message.h	/^    uint32_t addr;$/;"	m	language:C++	struct:UM_node_reg	access:public
UM_node_reg::gaddr	./message/user_message.h	/^    uint32_t gaddr;$/;"	m	language:C++	struct:UM_node_reg	access:public
UM_node_reg::gport	./message/user_message.h	/^    uint16_t gport;$/;"	m	language:C++	struct:UM_node_reg	access:public
UM_node_reg::port	./message/user_message.h	/^    uint16_t port;$/;"	m	language:C++	struct:UM_node_reg	access:public
UM_node_regok	./message/user_message.h	/^struct UM_node_regok {$/;"	s	language:C++
UM_node_regok::_UM_header	./message/user_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_node_regok	access:public
UM_node_regok::addr	./message/user_message.h	/^    uint32_t addr;$/;"	m	language:C++	struct:UM_node_regok	access:public
UM_node_regok::gaddr	./message/user_message.h	/^    uint32_t gaddr;$/;"	m	language:C++	struct:UM_node_regok	access:public
UM_node_regok::gport	./message/user_message.h	/^    uint16_t gport;$/;"	m	language:C++	struct:UM_node_regok	access:public
UM_node_regok::port	./message/user_message.h	/^    uint16_t port;$/;"	m	language:C++	struct:UM_node_regok	access:public
UM_node_subs	./message/user_message.h	/^struct UM_node_subs {$/;"	s	language:C++
UM_node_subs::_UM_header	./message/user_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_node_subs	access:public
UM_node_subs::n	./message/user_message.h	/^    uint16_t n;$/;"	m	language:C++	struct:UM_node_subs	access:public
UM_node_subs::subs	./message/user_message.h	/^    uint16_t subs[0];$/;"	m	language:C++	struct:UM_node_subs	access:public
UM_node_subs_size	./message/user_message.h	/^UM_node_subs_size(struct UM_node_subs* um) {$/;"	f	language:C++	signature:(struct UM_node_subs* um)
UM_play	./message/cli_message.h	/^struct UM_play {$/;"	s	language:C++
UM_play::_UM_header	./message/cli_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_play	access:public
UM_play::type	./message/cli_message.h	/^    int8_t type; \/\/ see ROOM_TYPE*$/;"	m	language:C++	struct:UM_play	access:public
UM_playbegin	./message/cli_message.h	/^struct UM_playbegin {$/;"	s	language:C++
UM_playbegin::_UM_header	./message/cli_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_playbegin	access:public
UM_playbegin::member	./message/cli_message.h	/^    struct tmember_detail member;$/;"	m	language:C++	struct:UM_playbegin	typeref:struct:UM_playbegin::tmember_detail	access:public
UM_playdone	./message/cli_message.h	/^struct UM_playdone {$/;"	s	language:C++
UM_playdone::_UM_header	./message/cli_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_playdone	access:public
UM_playfail	./message/cli_message.h	/^struct UM_playfail {$/;"	s	language:C++
UM_playfail::_UM_header	./message/cli_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_playfail	access:public
UM_playfail::error	./message/cli_message.h	/^    int8_t error;$/;"	m	language:C++	struct:UM_playfail	access:public
UM_playjoin	./message/cli_message.h	/^struct UM_playjoin {$/;"	s	language:C++
UM_playjoin::_UM_header	./message/cli_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_playjoin	access:public
UM_playjoin::member	./message/cli_message.h	/^    struct tmember_detail member;$/;"	m	language:C++	struct:UM_playjoin	typeref:struct:UM_playjoin::tmember_detail	access:public
UM_playloading	./message/cli_message.h	/^struct UM_playloading {$/;"	s	language:C++
UM_playloading::_UM_header	./message/cli_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_playloading	access:public
UM_playloading::leasttime	./message/cli_message.h	/^    int8_t leasttime;  \/\/ least time of loading$/;"	m	language:C++	struct:UM_playloading	access:public
UM_playloading::member	./message/cli_message.h	/^    struct tmember_brief member;$/;"	m	language:C++	struct:UM_playloading	typeref:struct:UM_playloading::tmember_brief	access:public
UM_playunjoin	./message/cli_message.h	/^struct UM_playunjoin {$/;"	s	language:C++
UM_playunjoin::_UM_header	./message/cli_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_playunjoin	access:public
UM_playunjoin::charid	./message/cli_message.h	/^    uint32_t charid;$/;"	m	language:C++	struct:UM_playunjoin	access:public
UM_playunjoin::reason	./message/cli_message.h	/^    int8_t reason; \/\/ enum PLAY_UNJOIN_T$/;"	m	language:C++	struct:UM_playunjoin	access:public
UM_playwait	./message/cli_message.h	/^struct UM_playwait {$/;"	s	language:C++
UM_playwait::_UM_header	./message/cli_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_playwait	access:public
UM_playwait::timeout	./message/cli_message.h	/^    int timeout;$/;"	m	language:C++	struct:UM_playwait	access:public
WIN32_LEAN_AND_MEAN	./net/socket.h	6;"	d	language:C++
_DISPATCHER	./host/host_dispatcher.c	/^static int _DISPATCHER = -1;$/;"	v	language:C
_GNU_SOURCE	./base/args.c	2;"	d	language:C
_GNU_SOURCE	./base/stringsplice.h	6;"	d	language:C++
_LEVEL	./host/host_log.c	/^static int _LEVEL = LOG_INFO;$/;"	v	language:C
_LOG_SERVICE	./host/host_log.c	/^static int _LOG_SERVICE = -1;$/;"	v	language:C
_NODE_header	./message/message.h	/^    _NODE_header;$/;"	m	language:C++	struct:NODE_header	access:public
_NODE_header	./message/message.h	14;"	d	language:C++
_STRSPLICE_MAX	./base/stringsplice.h	9;"	d	language:C++
_UM_header	./message/cli_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_charinfo	access:public
_UM_header	./message/cli_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_heartbeat	access:public
_UM_header	./message/cli_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_login	access:public
_UM_header	./message/cli_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_loginfail	access:public
_UM_header	./message/cli_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_logout	access:public
_UM_header	./message/cli_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_play	access:public
_UM_header	./message/cli_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_playbegin	access:public
_UM_header	./message/cli_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_playdone	access:public
_UM_header	./message/cli_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_playfail	access:public
_UM_header	./message/cli_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_playjoin	access:public
_UM_header	./message/cli_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_playloading	access:public
_UM_header	./message/cli_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_playunjoin	access:public
_UM_header	./message/cli_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_playwait	access:public
_UM_header	./message/message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_base	access:public
_UM_header	./message/message.h	17;"	d	language:C++
_UM_header	./message/user_message.h	/^    _UM_header; $/;"	m	language:C++	struct:UM_createroom	access:public
_UM_header	./message/user_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_cmd_req	access:public
_UM_header	./message/user_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_cmd_res	access:public
_UM_header	./message/user_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_destroyroom	access:public
_UM_header	./message/user_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_forward	access:public
_UM_header	./message/user_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_node_notify	access:public
_UM_header	./message/user_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_node_reg	access:public
_UM_header	./message/user_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_node_regok	access:public
_UM_header	./message/user_message.h	/^    _UM_header;$/;"	m	language:C++	struct:UM_node_subs	access:public
__NETBUF_H__	./net/netbuf.h	2;"	d	language:C++
__NET_H__	./net/net.h	2;"	d	language:C++
__args_h__	./base/args.h	2;"	d	language:C++
__array_h__	./base/array.h	2;"	d	language:C++
__cil_message_h__	./message/cli_message.h	2;"	d	language:C++
__client_type_h__	./service/client_type.h	2;"	d	language:C++
__dlmodule_h__	./host/dlmodule.h	2;"	d	language:C++
__freeid_h__	./base/freeid.h	2;"	d	language:C++
__gfreeid_h__	./base/gfreeid.h	2;"	d	language:C++
__hashid_h__	./base/hashid.h	2;"	d	language:C++
__host_dispatcher_h__	./host/host_dispatcher.h	2;"	d	language:C++
__host_gate_h__	./host/host_gate.h	2;"	d	language:C++
__host_group_h__	./host/host_group.h	2;"	d	language:C++
__host_h__	./host/host.h	2;"	d	language:C++
__host_log_h__	./host/host_log.h	2;"	d	language:C++
__host_message_h__	./host/host_message.h	2;"	d	language:C++
__host_net_h__	./host/host_net.h	2;"	d	language:C++
__host_node_h__	./host/host_node.h	2;"	d	language:C++
__host_reload_h__	./host/host_reload.h	2;"	d	language:C++
__host_remote_h__	./host/host_remote.h	2;"	d	language:C++
__host_service_h__	./host/host_service.h	2;"	d	language:C++
__host_timer_h__	./host/host_timer.h	2;"	d	language:C++
__lur_h__	./lur/lur.h	2;"	d	language:C++
__memrw_h__	./base/memrw.h	2;"	d	language:C++
__message_h__	./message/message.h	2;"	d	language:C++
__net_message_h__	./net/net_message.h	2;"	d	language:C++
__netpoll_h__	./net/netpoll.h	2;"	d	language:C++
__node_type_h__	./service/node_type.h	2;"	d	language:C++
__player_h__	./world/player.h	2;"	d	language:C++
__sharetype_h__	./message/sharetype.h	2;"	d	language:C++
__socket_epoll_h__	./net/socket_epoll.h	2;"	d	language:C++
__socket_h__	./net/socket.h	2;"	d	language:C++
__socket_select_h__	./net/socket_select.h	2;"	d	language:C++
__stringsplice_h__	./base/stringsplice.h	2;"	d	language:C++
__user_message_h__	./message/user_message.h	2;"	d	language:C++
__util_h__	./base/util.h	2;"	d	language:C++
__worldhelper_h__	./service/worldhelper.h	2;"	d	language:C++
_accept	./net/net.c	/^_accept(struct net* self, struct socket* listens) {$/;"	f	language:C	signature:(struct net* self, struct socket* listens)
_add_node	./host/host_node.c	/^_add_node(struct _array* arr, struct host_node* node) {$/;"	f	language:C	signature:(struct _array* arr, struct host_node* node)
_add_subscribe	./service/service_centers.c	/^_add_subscribe(struct _array* arr, uint16_t tid) {$/;"	f	language:C	signature:(struct _array* arr, uint16_t tid)
_alloc_slot	./host/host_group.c	/^_alloc_slot(struct host_group* g) {$/;"	f	language:C	signature:(struct host_group* g)
_alloc_sockets	./net/net.c	/^_alloc_sockets(int max) {$/;"	f	language:C	signature:(int max)
_allocplayer	./world/player.c	/^_allocplayer(uint16_t gid, int cid) {$/;"	f	language:C	signature:(uint16_t gid, int cid)
_allocplayer	./world/player.h	/^struct player* _allocplayer(uint16_t gid, int cid);$/;"	p	language:C++	signature:(uint16_t gid, int cid)
_allocplayers	./world/player.c	/^_allocplayers(int cmax, int hmax, int gmax) {$/;"	f	language:C	signature:(int cmax, int hmax, int gmax)
_allocplayers	./world/player.h	/^void _allocplayers(int cmax, int hmax, int gmax);$/;"	p	language:C++	signature:(int cmax, int hmax, int gmax)
_array	./host/host_node.c	/^struct _array {$/;"	s	language:C
_array	./service/service_centers.c	/^struct _array {$/;"	s	language:C
_array::cap	./host/host_node.c	/^    int cap;$/;"	m	language:C	struct:_array	access:public
_array::cap	./service/service_centers.c	/^    int cap;$/;"	m	language:C	struct:_array	access:public
_array::loaditer	./host/host_node.c	/^    int loaditer;$/;"	m	language:C	struct:_array	access:public
_array::p	./host/host_node.c	/^    struct host_node* p;$/;"	m	language:C	struct:_array	typeref:struct:_array::host_node	access:public
_array::p	./service/service_centers.c	/^    uint16_t* p;$/;"	m	language:C	struct:_array	access:public
_array::size	./host/host_node.c	/^    int size;$/;"	m	language:C	struct:_array	access:public
_array::size	./service/service_centers.c	/^    int size;$/;"	m	language:C	struct:_array	access:public
_broadcast_all	./service/service_cmds.c	/^_broadcast_all(struct server* self, struct UM_base* um) {$/;"	f	language:C	signature:(struct server* self, struct UM_base* um)
_broadcast_type	./service/service_cmds.c	/^_broadcast_type(struct server* self, int tid, struct UM_base* um) {$/;"	f	language:C	signature:(struct server* self, int tid, struct UM_base* um)
_buildmatchplayer	./service/service_gamematch.c	/^_buildmatchplayer(struct player* p, struct matchplayer* mp) {$/;"	f	language:C	signature:(struct player* p, struct matchplayer* mp)
_buildmember	./service/service_gamematch.c	/^_buildmember(struct player* p, struct tmember_brief* mb) {$/;"	f	language:C	signature:(struct player* p, struct tmember_brief* mb)
_calcload	./service/service_gamematch.c	/^_calcload(int8_t type) {$/;"	f	language:C	signature:(int8_t type)
_checksys	./host/host.c	/^_checksys() {$/;"	f	language:C
_close_socket	./net/net.c	/^_close_socket(struct net* self, struct socket* s) {$/;"	f	language:C	signature:(struct net* self, struct socket* s)
_closest_time	./host/host_timer.c	/^_closest_time() {$/;"	f	language:C
_cmdreq	./service/service_cmdctl.c	/^_cmdreq(struct cmdctl* self, int id, struct UM_base* um) {$/;"	f	language:C	signature:(struct cmdctl* self, int id, struct UM_base* um)
_conn2remote	./host/host_remote.c	/^_conn2remote(int connid) {$/;"	f	language:C	signature:(int connid)
_connect	./net/test.c	/^_connect(const char* ip, uint16_t port) {$/;"	f	language:C	signature:(const char* ip, uint16_t port)
_connect	./service/service_benchmark.c	/^_connect(struct service* s) {$/;"	f	language:C	signature:(struct service* s)
_connect	./tool/shaco-cli.c	/^_connect(const char* addr, uint16_t port) {$/;"	f	language:C	signature:(const char* addr, uint16_t port)
_connect_center	./service/service_centerc.c	/^_connect_center(struct service* s) {$/;"	f	language:C	signature:(struct service* s)
_create	./host/host_service.c	/^_create(const char* name) {$/;"	f	language:C	signature:(const char* name)
_create_socket	./net/net.c	/^_create_socket(struct net* self, socket_t fd, uint32_t addr, uint16_t port, int ud, int ut) {$/;"	f	language:C	signature:(struct net* self, socket_t fd, uint32_t addr, uint16_t port, int ud, int ut)
_decode_nodemessage	./service/node_type.h	/^_decode_nodemessage(void* msg, int sz, struct node_message* nm) {$/;"	f	language:C++	signature:(void* msg, int sz, struct node_message* nm)
_decode_playermessage	./service/worldhelper.h	/^_decode_playermessage(struct node_message* nm, struct player_message* pm) {$/;"	f	language:C++	signature:(struct node_message* nm, struct player_message* pm)
_default_log	./host/host_log.c	/^_default_log(int level, const char* log) {$/;"	f	language:C	signature:(int level, const char* log)
_dispatch	./net/test.c	/^_dispatch() {$/;"	f	language:C
_dispatch_events	./host/host_net.c	/^_dispatch_events() {$/;"	f	language:C
_dlclose	./host/dlmodule.c	/^_dlclose(struct dlmodule* dl) {$/;"	f	language:C	signature:(struct dlmodule* dl)
_elapsed	./host/host_timer.c	/^_elapsed() {$/;"	f	language:C
_equal_node	./host/host_node.c	/^_equal_node(struct host_node* a, struct host_node* b) {$/;"	f	language:C	signature:(struct host_node* a, struct host_node* b)
_event	./host/host_timer.c	/^struct _event {$/;"	s	language:C
_event::interval	./host/host_timer.c	/^    int interval;$/;"	m	language:C	struct:_event	access:public
_event::next_time	./host/host_timer.c	/^    uint64_t next_time;$/;"	m	language:C	struct:_event	access:public
_event::serviceid	./host/host_timer.c	/^    int serviceid;$/;"	m	language:C	struct:_event	access:public
_event_holder	./host/host_timer.c	/^struct _event_holder {$/;"	s	language:C
_event_holder::cap	./host/host_timer.c	/^    int cap;$/;"	m	language:C	struct:_event_holder	access:public
_event_holder::p	./host/host_timer.c	/^    struct _event* p;$/;"	m	language:C	struct:_event_holder	typeref:struct:_event_holder::_event	access:public
_event_holder::sz	./host/host_timer.c	/^    int sz;$/;"	m	language:C	struct:_event_holder	access:public
_event_holder_fini	./host/host_timer.c	/^_event_holder_fini(struct _event_holder* eh) {$/;"	f	language:C	signature:(struct _event_holder* eh)
_event_holder_grow	./host/host_timer.c	/^_event_holder_grow(struct _event_holder* eh) {$/;"	f	language:C	signature:(struct _event_holder* eh)
_event_holder_init	./host/host_timer.c	/^_event_holder_init(struct _event_holder* eh) {$/;"	f	language:C	signature:(struct _event_holder* eh)
_execute	./service/service_cmdctl.c	/^_execute(struct args* A, struct memrw* rw) {$/;"	f	language:C	signature:(struct args* A, struct memrw* rw)
_find	./host/host_service.c	/^_find(const char* name) {$/;"	f	language:C	signature:(const char* name)
_forward_world	./service/service_forward.c	/^_forward_world(struct gate_client* c, struct UM_base* um) {$/;"	f	language:C	signature:(struct gate_client* c, struct UM_base* um)
_free_node	./host/host_node.c	/^_free_node(struct host_node* node) {$/;"	f	language:C	signature:(struct host_node* node)
_free_slot	./host/host_group.c	/^_free_slot(struct host_group* g, struct _slot* s) {$/;"	f	language:C	signature:(struct host_group* g, struct _slot* s)
_freeplayer	./world/player.c	/^_freeplayer(struct player* p) {$/;"	f	language:C	signature:(struct player* p)
_freeplayer	./world/player.h	/^void _freeplayer(struct player* p);$/;"	p	language:C++	signature:(struct player* p)
_freeplayers	./world/player.c	/^_freeplayers() {$/;"	f	language:C
_freeplayers	./world/player.h	/^void _freeplayers();$/;"	p	language:C++	signature:()
_gen_message	./host/host_log.c	80;"	d	language:C
_get_node	./host/host_node.c	/^_get_node(uint16_t id) {$/;"	f	language:C	signature:(uint16_t id)
_get_socket	./net/net.c	/^_get_socket(struct net* self, int id) {$/;"	f	language:C	signature:(struct net* self, int id)
_getclient	./service/service_benchmark.c	/^_getclient(struct benchmark* self, int id) {$/;"	f	language:C	signature:(struct benchmark* self, int id)
_getloglevel	./service/service_cmdctl.c	/^_getloglevel(struct args* A, struct memrw* rw) {$/;"	f	language:C	signature:(struct args* A, struct memrw* rw)
_getnodeid	./service/service_cmds.c	/^_getnodeid(const char* tidstr, const char* sidstr) {$/;"	f	language:C	signature:(const char* tidstr, const char* sidstr)
_getplayer	./world/player.c	/^_getplayer(uint16_t gid, int cid) {$/;"	f	language:C	signature:(uint16_t gid, int cid)
_getplayer	./world/player.h	/^struct player* _getplayer(uint16_t gid, int cid);$/;"	p	language:C++	signature:(uint16_t gid, int cid)
_getplayerbyid	./world/player.c	/^_getplayerbyid(uint32_t charid) {$/;"	f	language:C	signature:(uint32_t charid)
_getplayerbyid	./world/player.h	/^struct player* _getplayerbyid(uint32_t charid);$/;"	p	language:C++	signature:(uint32_t charid)
_getvalue	./lur/lur.c	/^_getvalue(lua_State* L, const char* key) {$/;"	f	language:C	signature:(lua_State* L, const char* key)
_gfreeid_initslots	./base/gfreeid.h	11;"	d	language:C++
_grow	./base/array.h	/^_grow(struct array* self, size_t cap) {$/;"	f	language:C++	signature:(struct array* self, size_t cap)
_grow	./net/socket_select.h	/^_grow(struct np_state* np, int maxfd) {$/;"	f	language:C++	signature:(struct np_state* np, int maxfd)
_handlegame	./service/service_gamematch.c	/^_handlegame(struct gamematch* self, struct node_message* nm) {$/;"	f	language:C	signature:(struct gamematch* self, struct node_message* nm)
_handlegate	./service/service_gamematch.c	/^_handlegate(struct gamematch* self, struct node_message* nm) {$/;"	f	language:C	signature:(struct gamematch* self, struct node_message* nm)
_handlegate	./service/service_world.c	/^_handlegate(struct world* self, struct node_message* nm) {$/;"	f	language:C	signature:(struct world* self, struct node_message* nm)
_hash	./base/stringtable.h	/^_hash(const char* str, size_t l) {$/;"	f	language:C++	signature:(const char* str, size_t l)
_hashid	./world/player.c	43;"	d	language:C
_hashid_slot	./base/hashid.h	/^struct _hashid_slot {$/;"	s	language:C++
_hashid_slot::id	./base/hashid.h	/^    int id;$/;"	m	language:C++	struct:_hashid_slot	access:public
_hashid_slot::next	./base/hashid.h	/^    struct _hashid_slot* next;$/;"	m	language:C++	struct:_hashid_slot	typeref:struct:_hashid_slot::_hashid_slot	access:public
_hashplayer	./world/player.c	/^_hashplayer(struct player* p) {$/;"	f	language:C	signature:(struct player* p)
_hashplayer	./world/player.h	/^int _hashplayer(struct player* p);$/;"	p	language:C++	signature:(struct player* p)
_init_node	./host/host_node.c	/^_init_node(struct host_node* node) {$/;"	f	language:C	signature:(struct host_node* node)
_init_slots	./host/host_group.c	/^_init_slots(struct _slot* s, int begin, int end) {$/;"	f	language:C	signature:(struct _slot* s, int begin, int end)
_input	./tool/shaco-cli.c	/^_input(void* ud) {$/;"	f	language:C	signature:(void* ud)
_insert	./host/host_service.c	/^_insert(struct service* s) {$/;"	f	language:C	signature:(struct service* s)
_install_sighandler	./host/host.c	/^_install_sighandler() {$/;"	f	language:C
_isfree_node	./host/host_node.c	/^_isfree_node(struct host_node* node) {$/;"	f	language:C	signature:(struct host_node* node)
_isme	./host/host_node.c	/^_isme(struct host_node* node) {$/;"	f	language:C	signature:(struct host_node* node)
_isvalid_fd	./net/socket_select.h	/^_isvalid_fd(int fd) {$/;"	f	language:C++	signature:(int fd)
_isvalid_tid	./service/service_centers.c	/^_isvalid_tid(uint16_t tid) {$/;"	f	language:C	signature:(uint16_t tid)
_isvalidid	./world/player.c	40;"	d	language:C
_levelid	./host/host_log.c	/^_levelid(const char* level) {$/;"	f	language:C	signature:(const char* level)
_levelstr	./host/host_log.c	/^_levelstr(int level) {$/;"	f	language:C	signature:(int level)
_listen	./service/service_gate.c	/^_listen(struct service* s) {$/;"	f	language:C	signature:(struct service* s)
_listen	./service/service_node.c	/^_listen(struct service* s) {$/;"	f	language:C	signature:(struct service* s)
_locate_service	./service/service_dispatcher.c	/^_locate_service(struct dispatcher* self, struct UM_base* um)  {$/;"	f	language:C	signature:(struct dispatcher* self, struct UM_base* um)
_log_one	./service/service_log.c	/^_log_one(int level, const char* log) {$/;"	f	language:C	signature:(int level, const char* log)
_login_req	./service/service_world.c	/^_login_req(struct world* self, const struct host_node* node, int cid, struct UM_base* um) {$/;"	f	language:C	signature:(struct world* self, const struct host_node* node, int cid, struct UM_base* um)
_logout_req	./service/service_world.c	/^_logout_req(struct world* self, struct player* p) {$/;"	f	language:C	signature:(struct world* self, struct player* p)
_lookup	./service/service_gamematch.c	/^_lookup(struct gamematch* self, struct player* p, int8_t type) {$/;"	f	language:C	signature:(struct gamematch* self, struct player* p, int8_t type)
_lookupcmd	./service/service_cmdctl.c	/^_lookupcmd(const char* name) {$/;"	f	language:C	signature:(const char* name)
_match	./service/service_gamematch.c	/^_match(struct gamematch* self, struct player* p, struct player* p2) {$/;"	f	language:C	signature:(struct gamematch* self, struct player* p, struct player* p2)
_mynode	./service/service_node.c	/^_mynode(struct host_node* node) {$/;"	f	language:C	signature:(struct host_node* node)
_node_holder	./host/host_node.c	/^struct _node_holder {$/;"	s	language:C
_node_holder::me	./host/host_node.c	/^    uint16_t me; $/;"	m	language:C	struct:_node_holder	access:public
_node_holder::nodes	./host/host_node.c	/^    struct _array* nodes;$/;"	m	language:C	struct:_node_holder	typeref:struct:_node_holder::_array	access:public
_node_holder::size	./host/host_node.c	/^    int size;$/;"	m	language:C	struct:_node_holder	access:public
_node_holder::types	./host/host_node.c	/^    struct _type* types;$/;"	m	language:C	struct:_node_holder	typeref:struct:_node_holder::_type	access:public
_notify	./service/service_centers.c	/^_notify(int id, const struct host_node* node) {$/;"	f	language:C	signature:(int id, const struct host_node* node)
_notify_logout	./service/worldhelper.h	/^_notify_logout(const struct host_node* node, int cid, int8_t type) {$/;"	f	language:C++	signature:(const struct host_node* node, int cid, int8_t type)
_now	./host/host_timer.c	/^_now() {$/;"	f	language:C
_onconnect	./net/net.c	/^_onconnect(struct net* self, struct socket* s) {$/;"	f	language:C	signature:(struct net* self, struct socket* s)
_onconnect	./net/test.c	/^_onconnect(struct net_message* nm) {$/;"	f	language:C	signature:(struct net_message* nm)
_onconnect	./service/service_benchmark.c	/^_onconnect(struct benchmark* self, int connid) {$/;"	f	language:C	signature:(struct benchmark* self, int connid)
_onconnerr	./net/test.c	/^_onconnerr(struct net_message* nm) {$/;"	f	language:C	signature:(struct net_message* nm)
_ondestroyroom	./service/service_gamematch.c	/^_ondestroyroom(struct gamematch* self, struct node_message* nm) {$/;"	f	language:C	signature:(struct gamematch* self, struct node_message* nm)
_ondisconnect	./service/service_benchmark.c	/^_ondisconnect(struct benchmark* self, int connid) {$/;"	f	language:C	signature:(struct benchmark* self, int connid)
_onerror	./tool/shaco-cli.c	/^_onerror(int fd) {$/;"	f	language:C	signature:(int fd)
_onnotify	./service/service_node.c	/^_onnotify(struct service* s, int id, struct UM_base* um) {$/;"	f	language:C	signature:(struct service* s, int id, struct UM_base* um)
_onreg	./service/service_centers.c	/^_onreg(struct centers* self, struct host_node* node) {$/;"	f	language:C	signature:(struct centers* self, struct host_node* node)
_onregcb	./service/service_centers.c	/^_onregcb(const struct host_node* node, void* ud) {$/;"	f	language:C	signature:(const struct host_node* node, void* ud)
_onsockerr	./net/test.c	/^_onsockerr(struct net_message* nm) {$/;"	f	language:C	signature:(struct net_message* nm)
_op	./net/socket_epoll.h	/^_op(int epoll_fd, int fd, int op, int mask, void* ud) {$/;"	f	language:C++	signature:(int epoll_fd, int fd, int op, int mask, void* ud)
_open	./host/dlmodule.c	/^_open(struct dlmodule* dl) {$/;"	f	language:C	signature:(struct dlmodule* dl)
_parse	./base/args.c	/^_parse(struct args* A, int max) {$/;"	f	language:C	signature:(struct args* A, int max)
_playreq	./service/service_gamematch.c	/^_playreq(struct gamematch* self, struct player_message* pm) {$/;"	f	language:C	signature:(struct gamematch* self, struct player_message* pm)
_poll	./net/test.c	/^_poll(int timeout) {$/;"	f	language:C	signature:(int timeout)
_read	./net/test.c	/^_read(struct net_message* nm) {$/;"	f	language:C	signature:(struct net_message* nm)
_read	./tool/shaco-cli.c	/^_read(int fd, void* buf, size_t sz) {$/;"	f	language:C	signature:(int fd, void* buf, size_t sz)
_read_one	./service/service_dispatcher.c	/^_read_one(struct net_message* nm, int skip) {$/;"	f	language:C	signature:(struct net_message* nm, int skip)
_readone	./net/test.c	/^_readone(struct net_message* nm) {$/;"	f	language:C	signature:(struct net_message* nm)
_receive	./tool/shaco-cli.c	/^_receive(void* ud) {$/;"	f	language:C	signature:(void* ud)
_reg	./service/service_node.c	/^_reg(struct service* s, int id, struct UM_base* um) {$/;"	f	language:C	signature:(struct service* s, int id, struct UM_base* um)
_reg_request	./service/service_centerc.c	/^_reg_request(int id) {$/;"	f	language:C	signature:(int id)
_reg_request	./service/service_node.c	/^_reg_request(int id) {$/;"	f	language:C	signature:(int id)
_regok	./service/service_node.c	/^_regok(struct service* s, int id, struct UM_base* um) {$/;"	f	language:C	signature:(struct service* s, int id, struct UM_base* um)
_reload	./host/host_service.c	/^_reload(struct service* s) {$/;"	f	language:C	signature:(struct service* s)
_reload	./service/service_cmdctl.c	/^_reload(struct args* A, struct memrw* rw) {$/;"	f	language:C	signature:(struct args* A, struct memrw* rw)
_res	./service/service_cmds.c	/^_res(struct server* self, int id, struct UM_base* um) {$/;"	f	language:C	signature:(struct server* self, int id, struct UM_base* um)
_response_error	./service/service_cmds.c	/^_response_error(int id, const char* error) {$/;"	f	language:C	signature:(int id, const char* error)
_routeto_node	./service/service_cmds.c	/^_routeto_node(struct server* self, uint16_t nodeid, struct UM_base* um) {$/;"	f	language:C	signature:(struct server* self, uint16_t nodeid, struct UM_base* um)
_send	./net/test.c	/^_send(int id, void* data, int sz) {$/;"	f	language:C	signature:(int id, void* data, int sz)
_send_buffer	./net/net.c	/^_send_buffer(struct net* self, struct socket* s) {$/;"	f	language:C	signature:(struct net* self, struct socket* s)
_send_one	./service/service_benchmark.c	/^_send_one(struct benchmark* self, int id) {$/;"	f	language:C	signature:(struct benchmark* self, int id)
_send_to_service	./host/host_log.c	/^_send_to_service(int level, char* log, int sz) {$/;"	f	language:C	signature:(int level, char* log, int sz)
_sendto_remote	./service/service_cmds.c	/^_sendto_remote(const struct host_node* node, void* ud) {$/;"	f	language:C	signature:(const struct host_node* node, void* ud)
_setloglevel	./service/service_cmdctl.c	/^_setloglevel(struct args* A, struct memrw* rw) {$/;"	f	language:C	signature:(struct args* A, struct memrw* rw)
_shownode	./service/service_cmdctl.c	/^_shownode(struct args* A, struct memrw* rw) {$/;"	f	language:C	signature:(struct args* A, struct memrw* rw)
_shownodecb	./service/service_cmdctl.c	/^_shownodecb(const struct host_node* node, void* ud) {$/;"	f	language:C	signature:(const struct host_node* node, void* ud)
_sigtermhandler	./host/host.c	/^_sigtermhandler(int sig) {$/;"	f	language:C	signature:(int sig)
_slot	./host/host_group.c	/^struct _slot {$/;"	s	language:C
_slot::id	./host/host_group.c	/^    int id;$/;"	m	language:C	struct:_slot	access:public
_slot::used	./host/host_group.c	/^    int used;$/;"	m	language:C	struct:_slot	access:public
_socket_close	./net/socket.h	/^_socket_close(socket_t fd) {$/;"	f	language:C++	signature:(socket_t fd)
_socket_closeonexec	./net/socket.h	/^_socket_closeonexec(socket_t fd) {$/;"	f	language:C++	signature:(socket_t fd)
_socket_error	./net/socket.h	41;"	d	language:C++
_socket_error	./net/socket.h	47;"	d	language:C++
_socket_geterror	./net/socket.h	/^_socket_geterror(socket_t fd) {$/;"	f	language:C++	signature:(socket_t fd)
_socket_geterror	./net/socket.h	/^static inline int _socket_geterror(socket_t fd);$/;"	p	language:C++	signature:(socket_t fd)
_socket_geterror	./net/socket.h	43;"	d	language:C++
_socket_nonblocking	./net/socket.h	/^_socket_nonblocking(socket_t fd) {$/;"	f	language:C++	signature:(socket_t fd)
_socket_read	./net/socket.h	45;"	d	language:C++
_socket_read	./net/socket.h	51;"	d	language:C++
_socket_reuseaddr	./net/socket.h	/^_socket_reuseaddr(socket_t fd) {$/;"	f	language:C++	signature:(socket_t fd)
_socket_strerror	./net/socket.h	42;"	d	language:C++
_socket_strerror	./net/socket.h	48;"	d	language:C++
_socket_write	./net/socket.h	44;"	d	language:C++
_socket_write	./net/socket.h	50;"	d	language:C++
_start	./service/service_benchmark.c	/^_start(struct benchmark* self) {$/;"	f	language:C	signature:(struct benchmark* self)
_str_splice	./base/stringsplice.h	/^struct _str_splice {$/;"	s	language:C++
_str_splice::len	./base/stringsplice.h	/^    size_t len;$/;"	m	language:C++	struct:_str_splice	access:public
_str_splice::p	./base/stringsplice.h	/^    const char* p;$/;"	m	language:C++	struct:_str_splice	access:public
_strchrnul	./base/stringsplice.h	/^_strchrnul(const char* s, int c) {$/;"	f	language:C++	signature:(const char* s, int c)
_strchrskip	./base/args.c	/^_strchrskip(char* s, int c) {$/;"	f	language:C	signature:(char* s, int c)
_strerror	./service/service_cmdctl.c	/^_strerror(int error) {$/;"	f	language:C	signature:(int error)
_string	./base/stringtable.h	/^struct _string {$/;"	s	language:C++
_string::hash	./base/stringtable.h	/^    uint32_t hash;$/;"	m	language:C++	struct:_string	access:public
_string::len	./base/stringtable.h	/^    size_t len;$/;"	m	language:C++	struct:_string	access:public
_string::next	./base/stringtable.h	/^    struct _string* next;$/;"	m	language:C++	struct:_string	typeref:struct:_string::_string	access:public
_string::str	./base/stringtable.h	/^    char str[0];$/;"	m	language:C++	struct:_string	access:public
_string_new	./base/stringtable.h	/^_string_new(const char* str, size_t l, uint32_t hash) {$/;"	f	language:C++	signature:(const char* str, size_t l, uint32_t hash)
_stringtable_h__	./base/stringtable.h	2;"	d	language:C++
_sub_request	./service/service_centerc.c	/^_sub_request(int id) {$/;"	f	language:C	signature:(int id)
_subscribe	./net/net.c	/^_subscribe(struct net* self, struct socket* s, int mask) {$/;"	f	language:C	signature:(struct net* self, struct socket* s, int mask)
_subscribe	./service/service_centers.c	/^_subscribe(struct centers* self, int id, struct UM_base* um) {$/;"	f	language:C	signature:(struct centers* self, int id, struct UM_base* um)
_subscribecb	./service/service_centers.c	/^_subscribecb(const struct host_node* node, void* ud) {$/;"	f	language:C	signature:(const struct host_node* node, void* ud)
_type	./host/host_node.c	/^struct _type {$/;"	s	language:C
_type::name	./host/host_node.c	/^    char name[HNODE_NAME_MAX];$/;"	m	language:C	struct:_type	access:public
_write	./tool/shaco-cli.c	/^_write(int fd, const void* buf, size_t sz) {$/;"	f	language:C	signature:(int fd, const void* buf, size_t sz)
active_time	./host/host_gate.h	/^    uint64_t active_time;$/;"	m	language:C++	struct:gate_client	access:public
addr	./host/host_node.h	/^    uint32_t addr;$/;"	m	language:C++	struct:host_node	access:public
addr	./message/user_message.h	/^    uint32_t addr;$/;"	m	language:C++	struct:UM_node_notify	access:public
addr	./message/user_message.h	/^    uint32_t addr;$/;"	m	language:C++	struct:UM_node_reg	access:public
addr	./message/user_message.h	/^    uint32_t addr;$/;"	m	language:C++	struct:UM_node_regok	access:public
addr	./net/net.c	/^    uint32_t addr;$/;"	m	language:C	struct:socket	access:public
argc	./base/args.h	/^    int   argc;$/;"	m	language:C++	struct:args	access:public
args	./base/args.h	/^struct args {$/;"	s	language:C++
args::argc	./base/args.h	/^    int   argc;$/;"	m	language:C++	struct:args	access:public
args::argv	./base/args.h	/^    char* argv[ARGS_MAX];$/;"	m	language:C++	struct:args	access:public
args::buf	./base/args.h	/^    char  buf[ARGS_BUF];$/;"	m	language:C++	struct:args	access:public
args_parsestr	./base/args.c	/^args_parsestr(struct args* A, int max, const char* str) {$/;"	f	language:C	signature:(struct args* A, int max, const char* str)
args_parsestr	./base/args.h	/^int args_parsestr(struct args* A, int max, const char* str);$/;"	p	language:C++	signature:(struct args* A, int max, const char* str)
args_parsestrl	./base/args.c	/^args_parsestrl(struct args* A, int max, const char* str, size_t l) {$/;"	f	language:C	signature:(struct args* A, int max, const char* str, size_t l)
args_parsestrl	./base/args.h	/^int args_parsestrl(struct args* A, int max, const char* str, size_t l);$/;"	p	language:C++	signature:(struct args* A, int max, const char* str, size_t l)
argv	./base/args.h	/^    char* argv[ARGS_MAX];$/;"	m	language:C++	struct:args	access:public
array	./base/array.h	/^struct array {$/;"	s	language:C++
array::cap	./base/array.h	/^    size_t cap;$/;"	m	language:C++	struct:array	access:public
array::elems	./base/array.h	/^    void** elems;$/;"	m	language:C++	struct:array	access:public
array::size	./base/array.h	/^    size_t size;$/;"	m	language:C++	struct:array	access:public
array_capacity	./base/array.h	/^array_capacity(struct array* self) {$/;"	f	language:C++	signature:(struct array* self)
array_fini	./base/array.h	/^array_fini(struct array* self) {$/;"	f	language:C++	signature:(struct array* self)
array_free	./base/array.h	/^array_free(struct array* self) {$/;"	f	language:C++	signature:(struct array* self)
array_get	./base/array.h	/^array_get(struct array* self, size_t index) {$/;"	f	language:C++	signature:(struct array* self, size_t index)
array_init	./base/array.h	/^array_init(struct array* self, size_t max) {$/;"	f	language:C++	signature:(struct array* self, size_t max)
array_new	./base/array.h	/^array_new(size_t max) {$/;"	f	language:C++	signature:(size_t max)
array_push	./base/array.h	/^array_push(struct array* self, void* pointer) {$/;"	f	language:C++	signature:(struct array* self, void* pointer)
array_set	./base/array.h	/^array_set(struct array* self, size_t index, void* pointer) {$/;"	f	language:C++	signature:(struct array* self, size_t index, void* pointer)
array_size	./base/array.h	/^array_size(struct array* self) {$/;"	f	language:C++	signature:(struct array* self)
begin	./base/memrw.h	/^    char* begin;$/;"	m	language:C++	struct:memrw	access:public
benchmark	./service/service_benchmark.c	/^struct benchmark {$/;"	s	language:C
benchmark::clients	./service/service_benchmark.c	/^    struct client* clients;$/;"	m	language:C	struct:benchmark	typeref:struct:benchmark::client	access:public
benchmark::connected	./service/service_benchmark.c	/^    int connected;$/;"	m	language:C	struct:benchmark	access:public
benchmark::end	./service/service_benchmark.c	/^    uint64_t end; $/;"	m	language:C	struct:benchmark	access:public
benchmark::fi	./service/service_benchmark.c	/^    struct freeid fi;$/;"	m	language:C	struct:benchmark	typeref:struct:benchmark::freeid	access:public
benchmark::max	./service/service_benchmark.c	/^    int max;$/;"	m	language:C	struct:benchmark	access:public
benchmark::packetsz	./service/service_benchmark.c	/^    int packetsz;$/;"	m	language:C	struct:benchmark	access:public
benchmark::query	./service/service_benchmark.c	/^    int query;$/;"	m	language:C	struct:benchmark	access:public
benchmark::query_done	./service/service_benchmark.c	/^    int query_done;$/;"	m	language:C	struct:benchmark	access:public
benchmark::query_send	./service/service_benchmark.c	/^    int query_send;$/;"	m	language:C	struct:benchmark	access:public
benchmark::start	./service/service_benchmark.c	/^    uint64_t start;$/;"	m	language:C	struct:benchmark	access:public
benchmark_create	./service/service_benchmark.c	/^benchmark_create() {$/;"	f	language:C
benchmark_free	./service/service_benchmark.c	/^benchmark_free(struct benchmark* self) {$/;"	f	language:C	signature:(struct benchmark* self)
benchmark_init	./service/service_benchmark.c	/^benchmark_init(struct service* s) {$/;"	f	language:C	signature:(struct service* s)
benchmark_net	./service/service_benchmark.c	/^benchmark_net(struct service* s, struct net_message* nm) {$/;"	f	language:C	signature:(struct service* s, struct net_message* nm)
benchmark_time	./service/service_benchmark.c	/^benchmark_time(struct service* s) {$/;"	f	language:C	signature:(struct service* s)
benchmark_usermsg	./service/service_benchmark.c	/^benchmark_usermsg(struct service* s, int id, void* msg, int sz) {$/;"	f	language:C	signature:(struct service* s, int id, void* msg, int sz)
block_size	./net/netbuf.c	/^    int block_size;$/;"	m	language:C	struct:netbuf	access:public
blocks	./net/netbuf.c	/^    char blocks[0];$/;"	m	language:C	struct:netbuf	access:public
buf	./base/args.h	/^    char  buf[ARGS_BUF];$/;"	m	language:C++	struct:args	access:public
c	./host/host_gate.h	/^    struct gate_client* c;$/;"	m	language:C++	struct:gate_message	typeref:struct:gate_message::gate_client	access:public
cap	./base/array.h	/^    size_t cap;$/;"	m	language:C++	struct:array	access:public
cap	./base/freeid.h	/^    int cap;$/;"	m	language:C++	struct:freeid	access:public
cap	./base/hashid.h	/^    int cap;$/;"	m	language:C++	struct:hashid	access:public
cap	./host/host_node.c	/^    int cap;$/;"	m	language:C	struct:_array	access:public
cap	./host/host_timer.c	/^    int cap;$/;"	m	language:C	struct:_event_holder	access:public
cap	./net/socket_select.h	/^    int cap; $/;"	m	language:C++	struct:np_state	access:public
cap	./service/service_centers.c	/^    int cap;$/;"	m	language:C	struct:_array	access:public
cap	./service/service_gamematch.c	/^    int cap;$/;"	m	language:C	struct:creating	access:public
center_or_cli_service	./service/service_node.c	/^    int center_or_cli_service;$/;"	m	language:C	struct:node	access:public
centerc_init	./service/service_centerc.c	/^centerc_init(struct service* s) {$/;"	f	language:C	signature:(struct service* s)
centerc_net	./service/service_centerc.c	/^centerc_net(struct service* s, struct net_message* nm) {$/;"	f	language:C	signature:(struct service* s, struct net_message* nm)
centerc_service	./service/service_centerc.c	/^centerc_service(struct service* s, struct service_message* sm) {$/;"	f	language:C	signature:(struct service* s, struct service_message* sm)
centerc_time	./service/service_centerc.c	/^centerc_time(struct service* s) {$/;"	f	language:C	signature:(struct service* s)
centers	./service/service_centers.c	/^struct centers {$/;"	s	language:C
centers::subs	./service/service_centers.c	/^    struct _array subs[NODE_TYPE_MAX];$/;"	m	language:C	struct:centers	typeref:struct:centers::_array	access:public
centers_create	./service/service_centers.c	/^centers_create() {$/;"	f	language:C
centers_free	./service/service_centers.c	/^centers_free(struct centers* self) {$/;"	f	language:C	signature:(struct centers* self)
centers_init	./service/service_centers.c	/^centers_init(struct service* s) {$/;"	f	language:C	signature:(struct service* s)
centers_nodemsg	./service/service_centers.c	/^centers_nodemsg(struct service* s, int id, void* msg, int sz) {$/;"	f	language:C	signature:(struct service* s, int id, void* msg, int sz)
centers_service	./service/service_centers.c	/^centers_service(struct service* s, struct service_message* sm) {$/;"	f	language:C	signature:(struct service* s, struct service_message* sm)
cfg	./host/host.c	/^    struct lur* cfg;$/;"	m	language:C	struct:host	typeref:struct:host::lur	access:public
chardata	./message/sharetype.h	/^struct chardata {$/;"	s	language:C++
chardata::charid	./message/sharetype.h	/^    uint32_t charid;$/;"	m	language:C++	struct:chardata	access:public
chardata::name	./message/sharetype.h	/^    char name[NAME_MAX];$/;"	m	language:C++	struct:chardata	access:public
charid	./message/cli_message.h	/^    uint32_t charid;$/;"	m	language:C++	struct:UM_playunjoin	access:public
charid	./message/sharetype.h	/^    uint32_t charid;$/;"	m	language:C++	struct:chardata	access:public
charid	./message/sharetype.h	/^    uint32_t charid;$/;"	m	language:C++	struct:tmember_brief	access:public
charid	./message/sharetype.h	/^    uint32_t charid;$/;"	m	language:C++	struct:tmember_detail	access:public
charid	./service/service_gamematch.c	/^    uint32_t charid;$/;"	m	language:C	struct:matchplayer	access:public
chariditer	./service/service_world.c	/^    uint32_t chariditer;$/;"	m	language:C	struct:world	access:public
cid	./message/user_message.h	/^    int32_t cid;$/;"	m	language:C++	struct:UM_cmd_req	access:public
cid	./message/user_message.h	/^    int32_t cid;$/;"	m	language:C++	struct:UM_cmd_res	access:public
cid	./message/user_message.h	/^    int32_t cid;$/;"	m	language:C++	struct:UM_forward	access:public
cid	./world/player.h	/^    uint16_t cid;$/;"	m	language:C++	struct:player	access:public
client	./service/service_benchmark.c	/^struct client {$/;"	s	language:C
client	./tool/shaco-cli.c	/^struct client {$/;"	s	language:C
client::connected	./service/service_benchmark.c	/^    bool connected;$/;"	m	language:C	struct:client	access:public
client::connid	./service/service_benchmark.c	/^    int connid;$/;"	m	language:C	struct:client	access:public
client::fd	./tool/shaco-cli.c	/^    int fd;$/;"	m	language:C	struct:client	access:public
clients	./service/service_benchmark.c	/^    struct client* clients;$/;"	m	language:C	struct:benchmark	typeref:struct:benchmark::client	access:public
cmax	./host/host_gate.c	/^    int cmax;$/;"	m	language:C	struct:gate	access:public
cmax	./world/player.c	/^    int cmax;$/;"	m	language:C	struct:player_holder	access:public
cmd	./message/user_message.h	/^    char cmd[0];$/;"	m	language:C++	struct:UM_cmd_req	access:public
cmdctl	./service/service_cmdctl.c	/^struct cmdctl {$/;"	s	language:C
cmdctl::cmds_service	./service/service_cmdctl.c	/^    int cmds_service;$/;"	m	language:C	struct:cmdctl	access:public
cmdctl_create	./service/service_cmdctl.c	/^cmdctl_create() {$/;"	f	language:C
cmdctl_free	./service/service_cmdctl.c	/^cmdctl_free(struct cmdctl* self) {$/;"	f	language:C	signature:(struct cmdctl* self)
cmdctl_init	./service/service_cmdctl.c	/^cmdctl_init(struct service* s) {$/;"	f	language:C	signature:(struct service* s)
cmdctl_nodemsg	./service/service_cmdctl.c	/^cmdctl_nodemsg(struct service* s, int id, void* msg, int sz) {$/;"	f	language:C	signature:(struct service* s, int id, void* msg, int sz)
cmds_create	./service/service_cmds.c	/^cmds_create() {$/;"	f	language:C
cmds_free	./service/service_cmds.c	/^cmds_free(struct server* self) {$/;"	f	language:C	signature:(struct server* self)
cmds_init	./service/service_cmds.c	/^cmds_init(struct service* s) {$/;"	f	language:C	signature:(struct service* s)
cmds_net	./service/service_cmds.c	/^cmds_net(struct service* s, struct gate_message* gm) {$/;"	f	language:C	signature:(struct service* s, struct gate_message* gm)
cmds_nodemsg	./service/service_cmds.c	/^cmds_nodemsg(struct service* s, int id, void* msg, int sz) {$/;"	f	language:C	signature:(struct service* s, int id, void* msg, int sz)
cmds_service	./service/service_cmdctl.c	/^    int cmds_service;$/;"	m	language:C	struct:cmdctl	access:public
cmds_usermsg	./service/service_cmds.c	/^cmds_usermsg(struct service* s, int id, void* msg, int sz) { $/;"	f	language:C	signature:(struct service* s, int id, void* msg, int sz)
command	./service/service_cmdctl.c	/^struct command {$/;"	s	language:C
command::fun	./service/service_cmdctl.c	/^    int (*fun)(struct args* A, struct memrw* rw);$/;"	m	language:C	struct:command	access:public
command::name	./service/service_cmdctl.c	/^    const char* name;$/;"	m	language:C	struct:command	access:public
connected	./host/host_gate.h	/^    bool connected;$/;"	m	language:C++	struct:gate_client	access:public
connected	./service/service_benchmark.c	/^    bool connected;$/;"	m	language:C	struct:client	access:public
connected	./service/service_benchmark.c	/^    int connected;$/;"	m	language:C	struct:benchmark	access:public
connid	./host/host_gate.h	/^    int connid;$/;"	m	language:C++	struct:gate_client	access:public
connid	./host/host_node.h	/^    int connid;$/;"	m	language:C++	struct:host_node	access:public
connid	./host/host_remote.c	/^    int connid;$/;"	m	language:C	struct:remote	access:public
connid	./net/net_message.h	/^    int connid;$/;"	m	language:C++	struct:net_message	access:public
connid	./service/service_benchmark.c	/^    int connid;$/;"	m	language:C	struct:client	access:public
content	./host/dlmodule.h	/^    void* content;$/;"	m	language:C++	struct:dlmodule	access:public
create	./host/dlmodule.h	/^    void* (*create)();$/;"	m	language:C++	struct:dlmodule	access:public
creating	./service/service_gamematch.c	/^struct creating {$/;"	s	language:C
creating::cap	./service/service_gamematch.c	/^    int cap;$/;"	m	language:C	struct:creating	access:public
creating::size	./service/service_gamematch.c	/^    int size;$/;"	m	language:C	struct:creating	access:public
ctl_service	./service/service_cmds.c	/^    int ctl_service;$/;"	m	language:C	struct:server	access:public
data	./host/host_remote.c	/^    void* data;$/;"	m	language:C	struct:remote	access:public
data	./message/cli_message.h	/^    struct chardata data;$/;"	m	language:C++	struct:UM_charinfo	typeref:struct:UM_charinfo::chardata	access:public
data	./message/message.h	/^    uint8_t data[0];$/;"	m	language:C++	struct:UM_base	access:public
data	./net/net.c	/^    char data[0];$/;"	m	language:C	struct:sbuffer	access:public
data	./world/player.h	/^    struct chardata data;$/;"	m	language:C++	struct:player	typeref:struct:player::chardata	access:public
dirty	./host/host_timer.c	/^    bool dirty;$/;"	m	language:C	struct:host_timer	access:public
dispatcher	./service/service_dispatcher.c	/^struct dispatcher {$/;"	s	language:C
dispatcher::services	./service/service_dispatcher.c	/^    int services[UMID_MAX]; \/\/ hold for all subscriber(service id) of msg$/;"	m	language:C	struct:dispatcher	access:public
dispatcher_create	./service/service_dispatcher.c	/^dispatcher_create() {$/;"	f	language:C
dispatcher_free	./service/service_dispatcher.c	/^dispatcher_free(struct dispatcher* self) {$/;"	f	language:C	signature:(struct dispatcher* self)
dispatcher_net	./service/service_dispatcher.c	/^dispatcher_net(struct service* s, struct net_message* nm) {$/;"	f	language:C	signature:(struct service* s, struct net_message* nm)
dispatcher_service	./service/service_dispatcher.c	/^dispatcher_service(struct service* s, struct service_message* sm) {$/;"	f	language:C	signature:(struct service* s, struct service_message* sm)
dl	./host/host_service.h	/^    struct dlmodule dl;$/;"	m	language:C++	struct:service	typeref:struct:service::dlmodule	access:public
dlmodule	./host/dlmodule.h	/^struct dlmodule {$/;"	s	language:C++
dlmodule::content	./host/dlmodule.h	/^    void* content;$/;"	m	language:C++	struct:dlmodule	access:public
dlmodule::create	./host/dlmodule.h	/^    void* (*create)();$/;"	m	language:C++	struct:dlmodule	access:public
dlmodule::free	./host/dlmodule.h	/^    void  (*free)(void* pointer);$/;"	m	language:C++	struct:dlmodule	access:public
dlmodule::handle	./host/dlmodule.h	/^    void* handle;$/;"	m	language:C++	struct:dlmodule	access:public
dlmodule::init	./host/dlmodule.h	/^    int   (*init)(struct service* s);$/;"	m	language:C++	struct:dlmodule	access:public
dlmodule::name	./host/dlmodule.h	/^    char* name;$/;"	m	language:C++	struct:dlmodule	access:public
dlmodule::net	./host/dlmodule.h	/^    void  (*net)(struct service* s, struct net_message* nm);$/;"	m	language:C++	struct:dlmodule	access:public
dlmodule::nodemsg	./host/dlmodule.h	/^    void  (*nodemsg)(struct service* s, int id, void* msg, int sz);$/;"	m	language:C++	struct:dlmodule	access:public
dlmodule::reload	./host/dlmodule.h	/^    int   (*reload)(struct service* s);$/;"	m	language:C++	struct:dlmodule	access:public
dlmodule::service	./host/dlmodule.h	/^    void  (*service)(struct service* s, struct service_message* sm);$/;"	m	language:C++	struct:dlmodule	access:public
dlmodule::time	./host/dlmodule.h	/^    void  (*time)(struct service* s);$/;"	m	language:C++	struct:dlmodule	access:public
dlmodule::usermsg	./host/dlmodule.h	/^    void  (*usermsg)(struct service* s, int id, void* msg, int sz);$/;"	m	language:C++	struct:dlmodule	access:public
dlmodule_close	./host/dlmodule.c	/^dlmodule_close(struct dlmodule* dl) {$/;"	f	language:C	signature:(struct dlmodule* dl)
dlmodule_close	./host/dlmodule.h	/^void dlmodule_close(struct dlmodule* dl);$/;"	p	language:C++	signature:(struct dlmodule* dl)
dlmodule_load	./host/dlmodule.c	/^dlmodule_load(struct dlmodule* dl, const char* name) {$/;"	f	language:C	signature:(struct dlmodule* dl, const char* name)
dlmodule_load	./host/dlmodule.h	/^int dlmodule_load(struct dlmodule* dl, const char* name);$/;"	p	language:C++	signature:(struct dlmodule* dl, const char* name)
dlmodule_reload	./host/dlmodule.c	/^dlmodule_reload(struct dlmodule* dl) {$/;"	f	language:C	signature:(struct dlmodule* dl)
dlmodule_reload	./host/dlmodule.h	/^int dlmodule_reload(struct dlmodule* dl);$/;"	p	language:C++	signature:(struct dlmodule* dl)
echo_net	./service/service_echo.c	/^echo_net(struct service* s, struct gate_message* gm) {$/;"	f	language:C	signature:(struct service* s, struct gate_message* gm)
echo_usermsg	./service/service_echo.c	/^echo_usermsg(struct service* s, int id, void* msg, int sz) {$/;"	f	language:C	signature:(struct service* s, int id, void* msg, int sz)
eh	./host/host_timer.c	/^    struct _event_holder eh;$/;"	m	language:C	struct:host_timer	typeref:struct:host_timer::_event_holder	access:public
elapsed_time	./host/host_timer.c	/^    uint64_t elapsed_time;$/;"	m	language:C	struct:host_timer	access:public
elems	./base/array.h	/^    void** elems;$/;"	m	language:C++	struct:array	access:public
end	./service/service_benchmark.c	/^    uint64_t end; $/;"	m	language:C	struct:benchmark	access:public
epoll_fd	./net/socket_epoll.h	/^    int epoll_fd;$/;"	m	language:C++	struct:np_state	access:public
error	./message/cli_message.h	/^    int8_t error;$/;"	m	language:C++	struct:UM_loginfail	access:public
error	./message/cli_message.h	/^    int8_t error;$/;"	m	language:C++	struct:UM_playfail	access:public
error	./net/net.c	/^    int error;$/;"	m	language:C	struct:net	access:public
error	./net/net_message.h	/^    int error;$/;"	m	language:C++	struct:net_message	access:public
ev	./net/net.c	/^    struct np_event* ev;$/;"	m	language:C	struct:net	typeref:struct:net::np_event	access:public
ev	./net/socket_epoll.h	/^    struct epoll_event* ev;$/;"	m	language:C++	struct:np_state	typeref:struct:np_state::epoll_event	access:public
fd	./net/net.c	/^    socket_t fd;$/;"	m	language:C	struct:socket	access:public
fd	./net/net_message.h	/^    int fd;$/;"	m	language:C++	struct:net_message	access:public
fd	./tool/shaco-cli.c	/^    int fd;$/;"	m	language:C	struct:client	access:public
fi	./host/host_gate.c	/^    struct freeid fi;$/;"	m	language:C	struct:gate	typeref:struct:gate::freeid	access:public
fi	./service/service_benchmark.c	/^    struct freeid fi;$/;"	m	language:C	struct:benchmark	typeref:struct:benchmark::freeid	access:public
fi	./world/player.c	/^    struct freeid fi;$/;"	m	language:C	struct:player_holder	typeref:struct:player_holder::freeid	access:public
file	./host/host.c	/^    const char* file;$/;"	m	language:C	struct:host	access:public
forward_net	./service/service_forward.c	/^forward_net(struct service* s, struct gate_message* gm) {$/;"	f	language:C	signature:(struct service* s, struct gate_message* gm)
forward_nodemsg	./service/service_forward.c	/^forward_nodemsg(struct service* s, int id, void* msg, int sz) {$/;"	f	language:C	signature:(struct service* s, int id, void* msg, int sz)
forward_usermsg	./service/service_forward.c	/^forward_usermsg(struct service* s, int id, void* msg, int sz) {$/;"	f	language:C	signature:(struct service* s, int id, void* msg, int sz)
free	./base/freeid.h	/^    int* free;$/;"	m	language:C++	struct:freeid	access:public
free	./host/dlmodule.h	/^    void  (*free)(void* pointer);$/;"	m	language:C++	struct:dlmodule	access:public
free_slot	./host/host_group.c	/^    struct _slot* free_slot;$/;"	m	language:C	struct:host_group	typeref:struct:host_group::_slot	access:public
free_socket	./net/net.c	/^    struct socket* free_socket;$/;"	m	language:C	struct:net	typeref:struct:net::socket	access:public
freeid	./base/freeid.h	/^struct freeid {$/;"	s	language:C++
freeid::cap	./base/freeid.h	/^    int cap;$/;"	m	language:C++	struct:freeid	access:public
freeid::free	./base/freeid.h	/^    int* free;$/;"	m	language:C++	struct:freeid	access:public
freeid::hash	./base/freeid.h	/^    int hash; $/;"	m	language:C++	struct:freeid	access:public
freeid::ids	./base/freeid.h	/^    int* ids;$/;"	m	language:C++	struct:freeid	access:public
freeid::slots	./base/freeid.h	/^    int* slots;$/;"	m	language:C++	struct:freeid	access:public
freeid_alloc	./base/freeid.h	/^freeid_alloc(struct freeid* fi, int hash) {$/;"	f	language:C++	signature:(struct freeid* fi, int hash)
freeid_find	./base/freeid.h	/^freeid_find(struct freeid* fi, int hash) {$/;"	f	language:C++	signature:(struct freeid* fi, int hash)
freeid_fini	./base/freeid.h	/^freeid_fini(struct freeid* fi) {$/;"	f	language:C++	signature:(struct freeid* fi)
freeid_free	./base/freeid.h	/^freeid_free(struct freeid* fi, int hash) {$/;"	f	language:C++	signature:(struct freeid* fi, int hash)
freeid_full	./base/freeid.h	/^freeid_full(struct freeid* fi, int hash) {$/;"	f	language:C++	signature:(struct freeid* fi, int hash)
freeid_init	./base/freeid.h	/^freeid_init(struct freeid* fi, int cap, int hash) {$/;"	f	language:C++	signature:(struct freeid* fi, int cap, int hash)
freelist	./base/hashid.h	/^    struct _hashid_slot* freelist;$/;"	m	language:C++	struct:hashid	typeref:struct:hashid::_hashid_slot	access:public
fun	./service/service_cmdctl.c	/^    int (*fun)(struct args* A, struct memrw* rw);$/;"	m	language:C	struct:command	access:public
gaddr	./host/host_node.h	/^    uint32_t gaddr;$/;"	m	language:C++	struct:host_node	access:public
gaddr	./message/user_message.h	/^    uint32_t gaddr;$/;"	m	language:C++	struct:UM_node_reg	access:public
gaddr	./message/user_message.h	/^    uint32_t gaddr;$/;"	m	language:C++	struct:UM_node_regok	access:public
gamematch	./service/service_gamematch.c	/^struct gamematch {$/;"	s	language:C
gamematch::key	./service/service_gamematch.c	/^    uint32_t key;$/;"	m	language:C	struct:gamematch	access:public
gamematch::p	./service/service_gamematch.c	/^    struct matchplayer p;$/;"	m	language:C	struct:gamematch	typeref:struct:gamematch::matchplayer	access:public
gamematch_create	./service/service_gamematch.c	/^gamematch_create() {$/;"	f	language:C
gamematch_free	./service/service_gamematch.c	/^gamematch_free(struct gamematch* self) {$/;"	f	language:C	signature:(struct gamematch* self)
gamematch_init	./service/service_gamematch.c	/^gamematch_init(struct service* s) {$/;"	f	language:C	signature:(struct service* s)
gamematch_nodemsg	./service/service_gamematch.c	/^gamematch_nodemsg(struct service* s, int id, void* msg, int sz) {$/;"	f	language:C	signature:(struct service* s, int id, void* msg, int sz)
gamematch_service	./service/service_gamematch.c	/^gamematch_service(struct service* s, struct service_message* sm) {$/;"	f	language:C	signature:(struct service* s, struct service_message* sm)
gamematch_time	./service/service_gamematch.c	/^gamematch_time(struct service* s) {$/;"	f	language:C	signature:(struct service* s)
gate	./host/host_gate.c	/^struct gate {$/;"	s	language:C
gate	./service/service_gate.c	/^struct gate {$/;"	s	language:C
gate::cmax	./host/host_gate.c	/^    int cmax;$/;"	m	language:C	struct:gate	access:public
gate::fi	./host/host_gate.c	/^    struct freeid fi;$/;"	m	language:C	struct:gate	typeref:struct:gate::freeid	access:public
gate::handler	./service/service_gate.c	/^    int handler;$/;"	m	language:C	struct:gate	access:public
gate::livetime	./service/service_gate.c	/^    int livetime;$/;"	m	language:C	struct:gate	access:public
gate::p	./host/host_gate.c	/^    struct gate_client* p;$/;"	m	language:C	struct:gate	typeref:struct:gate::gate_client	access:public
gate_client	./host/host_gate.h	/^struct gate_client {$/;"	s	language:C++
gate_client::active_time	./host/host_gate.h	/^    uint64_t active_time;$/;"	m	language:C++	struct:gate_client	access:public
gate_client::connected	./host/host_gate.h	/^    bool connected;$/;"	m	language:C++	struct:gate_client	access:public
gate_client::connid	./host/host_gate.h	/^    int connid;$/;"	m	language:C++	struct:gate_client	access:public
gate_client::ud	./host/host_gate.h	/^    void* ud;$/;"	m	language:C++	struct:gate_client	access:public
gate_create	./service/service_gate.c	/^gate_create() {$/;"	f	language:C
gate_free	./service/service_gate.c	/^gate_free(struct gate* self) {$/;"	f	language:C	signature:(struct gate* self)
gate_init	./service/service_gate.c	/^gate_init(struct service* s) {$/;"	f	language:C	signature:(struct service* s)
gate_message	./host/host_gate.h	/^struct gate_message {$/;"	s	language:C++
gate_message::c	./host/host_gate.h	/^    struct gate_client* c;$/;"	m	language:C++	struct:gate_message	typeref:struct:gate_message::gate_client	access:public
gate_message::msg	./host/host_gate.h	/^    void* msg;$/;"	m	language:C++	struct:gate_message	access:public
gate_net	./service/service_gate.c	/^gate_net(struct service* s, struct net_message* nm) {$/;"	f	language:C	signature:(struct service* s, struct net_message* nm)
gate_time	./service/service_gate.c	/^gate_time(struct service* s) {$/;"	f	language:C	signature:(struct service* s)
gate_usermsg	./service/service_gate.c	/^gate_usermsg(struct service* s, int id, void* msg, int sz) {$/;"	f	language:C	signature:(struct service* s, int id, void* msg, int sz)
gfreeid_alloc	./base/gfreeid.h	20;"	d	language:C++
gfreeid_create	./base/gfreeid.h	54;"	d	language:C++
gfreeid_declare	./base/gfreeid.h	4;"	d	language:C++
gfreeid_destroy	./base/gfreeid.h	64;"	d	language:C++
gfreeid_free	./base/gfreeid.h	42;"	d	language:C++
gid	./world/player.h	/^    uint16_t gid;$/;"	m	language:C++	struct:player	access:public
gmax	./world/player.c	/^    int gmax;$/;"	m	language:C	struct:player_holder	access:public
gport	./host/host_node.h	/^    uint16_t gport;$/;"	m	language:C++	struct:host_node	access:public
gport	./message/user_message.h	/^    uint16_t gport;$/;"	m	language:C++	struct:UM_node_reg	access:public
gport	./message/user_message.h	/^    uint16_t gport;$/;"	m	language:C++	struct:UM_node_regok	access:public
handle	./host/dlmodule.h	/^    void* handle;$/;"	m	language:C++	struct:dlmodule	access:public
handler	./service/service_gate.c	/^    int handler;$/;"	m	language:C	struct:gate	access:public
hash	./base/freeid.h	/^    int hash; $/;"	m	language:C++	struct:freeid	access:public
hash	./base/hashid.h	/^    int hash;$/;"	m	language:C++	struct:hashid	access:public
hash	./base/stringtable.h	/^    uint32_t hash;$/;"	m	language:C++	struct:_string	access:public
hashid	./base/hashid.h	/^struct hashid {$/;"	s	language:C++
hashid::cap	./base/hashid.h	/^    int cap;$/;"	m	language:C++	struct:hashid	access:public
hashid::freelist	./base/hashid.h	/^    struct _hashid_slot* freelist;$/;"	m	language:C++	struct:hashid	typeref:struct:hashid::_hashid_slot	access:public
hashid::hash	./base/hashid.h	/^    int hash;$/;"	m	language:C++	struct:hashid	access:public
hashid::p	./base/hashid.h	/^    struct _hashid_slot* p;$/;"	m	language:C++	struct:hashid	typeref:struct:hashid::_hashid_slot	access:public
hashid::slots	./base/hashid.h	/^    struct _hashid_slot** slots;$/;"	m	language:C++	struct:hashid	typeref:struct:hashid::_hashid_slot	access:public
hashid_find	./base/hashid.h	/^hashid_find(struct hashid* hi, int id) {$/;"	f	language:C++	signature:(struct hashid* hi, int id)
hashid_fini	./base/hashid.h	/^hashid_fini(struct hashid* hi) {$/;"	f	language:C++	signature:(struct hashid* hi)
hashid_full	./base/hashid.h	/^hashid_full(struct hashid* hi) {$/;"	f	language:C++	signature:(struct hashid* hi)
hashid_hash	./base/hashid.h	/^hashid_hash(struct hashid* hi, int id) {$/;"	f	language:C++	signature:(struct hashid* hi, int id)
hashid_init	./base/hashid.h	/^hashid_init(struct hashid* hi, int cap, int hash) {$/;"	f	language:C++	signature:(struct hashid* hi, int cap, int hash)
hashid_remove	./base/hashid.h	/^hashid_remove(struct hashid* hi, int id) {$/;"	f	language:C++	signature:(struct hashid* hi, int id)
head	./net/net.c	/^    struct sbuffer* head;$/;"	m	language:C	struct:socket	typeref:struct:socket::sbuffer	access:public
hi	./world/player.c	/^    struct hashid hi;$/;"	m	language:C	struct:player_holder	typeref:struct:player_holder::hashid	access:public
hmax	./world/player.c	/^    int hmax;$/;"	m	language:C	struct:player_holder	access:public
hn	./service/node_type.h	/^    const struct host_node* hn;$/;"	m	language:C++	struct:node_message	typeref:struct:node_message::host_node	access:public
hn	./service/worldhelper.h	/^    const struct host_node* hn;$/;"	m	language:C++	struct:player_message	typeref:struct:player_message::host_node	access:public
host	./host/host.c	/^struct host {$/;"	s	language:C
host::cfg	./host/host.c	/^    struct lur* cfg;$/;"	m	language:C	struct:host	typeref:struct:host::lur	access:public
host::file	./host/host.c	/^    const char* file;$/;"	m	language:C	struct:host	access:public
host::loop	./host/host.c	/^    bool loop;$/;"	m	language:C	struct:host	access:public
host_create	./host/host.c	/^host_create(const char* file) {$/;"	f	language:C	signature:(const char* file)
host_create	./host/host.h	/^int host_create(const char* file);$/;"	p	language:C++	signature:(const char* file)
host_debug	./host/host_log.c	/^host_debug(const char* fmt, ...) {$/;"	f	language:C	signature:(const char* fmt, ...)
host_debug	./host/host_log.h	/^void host_debug(const char* fmt, ...);$/;"	p	language:C++	signature:(const char* fmt, ...)
host_dispatcher_fini	./host/host_dispatcher.c	/^host_dispatcher_fini() {$/;"	f	language:C
host_dispatcher_fini	./host/host_dispatcher.h	/^void host_dispatcher_fini();$/;"	p	language:C++	signature:()
host_dispatcher_init	./host/host_dispatcher.c	/^host_dispatcher_init() {$/;"	f	language:C
host_dispatcher_init	./host/host_dispatcher.h	/^int host_dispatcher_init();$/;"	p	language:C++	signature:()
host_dispatcher_publish	./host/host_dispatcher.c	/^host_dispatcher_publish(struct net_message* nm) {$/;"	f	language:C	signature:(struct net_message* nm)
host_dispatcher_publish	./host/host_dispatcher.h	/^int host_dispatcher_publish(struct net_message* nm);$/;"	p	language:C++	signature:(struct net_message* nm)
host_dispatcher_subscribe	./host/host_dispatcher.c	/^host_dispatcher_subscribe(int serviceid, int msgid) {$/;"	f	language:C	signature:(int serviceid, int msgid)
host_dispatcher_subscribe	./host/host_dispatcher.h	/^int host_dispatcher_subscribe(int serviceid, int msgid);$/;"	p	language:C++	signature:(int serviceid, int msgid)
host_error	./host/host_log.c	/^host_error(const char* fmt, ...) {$/;"	f	language:C	signature:(const char* fmt, ...)
host_error	./host/host_log.h	/^void host_error(const char* fmt, ...);$/;"	p	language:C++	signature:(const char* fmt, ...)
host_free	./host/host.c	/^host_free() {$/;"	f	language:C
host_free	./host/host.h	/^void host_free();$/;"	p	language:C++	signature:()
host_gate_acceptclient	./host/host_gate.c	/^host_gate_acceptclient(int connid, uint64_t now) {$/;"	f	language:C	signature:(int connid, uint64_t now)
host_gate_acceptclient	./host/host_gate.h	/^struct gate_client* host_gate_acceptclient(int connid, uint64_t now);$/;"	p	language:C++	signature:(int connid, uint64_t now)
host_gate_disconnclient	./host/host_gate.c	/^host_gate_disconnclient(struct gate_client* c, bool closesocket) {$/;"	f	language:C	signature:(struct gate_client* c, bool closesocket)
host_gate_disconnclient	./host/host_gate.h	/^int host_gate_disconnclient(struct gate_client* c, bool closesocket);$/;"	p	language:C++	signature:(struct gate_client* c, bool closesocket)
host_gate_fini	./host/host_gate.c	/^host_gate_fini() {$/;"	f	language:C
host_gate_fini	./host/host_gate.h	/^void host_gate_fini();$/;"	p	language:C++	signature:()
host_gate_firstclient	./host/host_gate.c	/^host_gate_firstclient() {$/;"	f	language:C
host_gate_firstclient	./host/host_gate.h	/^struct gate_client* host_gate_firstclient();$/;"	p	language:C++	signature:()
host_gate_getclient	./host/host_gate.c	/^host_gate_getclient(int connid) {$/;"	f	language:C	signature:(int connid)
host_gate_getclient	./host/host_gate.h	/^struct gate_client* host_gate_getclient(int connid);$/;"	p	language:C++	signature:(int connid)
host_gate_init	./host/host_gate.c	/^host_gate_init() {$/;"	f	language:C
host_gate_init	./host/host_gate.h	/^int host_gate_init();$/;"	p	language:C++	signature:()
host_gate_maxclient	./host/host_gate.c	/^host_gate_maxclient() {$/;"	f	language:C
host_gate_maxclient	./host/host_gate.h	/^int host_gate_maxclient();$/;"	p	language:C++	signature:()
host_gate_prepare	./host/host_gate.c	/^host_gate_prepare(int cmax, int hmax) {$/;"	f	language:C	signature:(int cmax, int hmax)
host_gate_prepare	./host/host_gate.h	/^int host_gate_prepare(int cmax, int hmax);$/;"	p	language:C++	signature:(int cmax, int hmax)
host_getint	./host/host.c	/^host_getint(const char* key, int def) {$/;"	f	language:C	signature:(const char* key, int def)
host_getint	./host/host.h	/^int host_getint(const char* key, int def);$/;"	p	language:C++	signature:(const char* key, int def)
host_getstr	./host/host.c	/^host_getstr(const char* key, const char* def) {$/;"	f	language:C	signature:(const char* key, const char* def)
host_getstr	./host/host.h	/^const char* host_getstr(const char* key, const char* def);$/;"	p	language:C++	signature:(const char* key, const char* def)
host_group	./host/host_group.c	/^struct host_group {$/;"	s	language:C
host_group::free_slot	./host/host_group.c	/^    struct _slot* free_slot;$/;"	m	language:C	struct:host_group	typeref:struct:host_group::_slot	access:public
host_group::nslot	./host/host_group.c	/^    int nslot;$/;"	m	language:C	struct:host_group	access:public
host_group::slots	./host/host_group.c	/^    struct _slot* slots;$/;"	m	language:C	struct:host_group	typeref:struct:host_group::_slot	access:public
host_group_broadcast	./host/host_group.c	/^host_group_broadcast(struct host_group* g, void* msg, int sz) {$/;"	f	language:C	signature:(struct host_group* g, void* msg, int sz)
host_group_broadcast	./host/host_group.h	/^int host_group_broadcast(struct host_group* g, void* msg, int sz);$/;"	p	language:C++	signature:(struct host_group* g, void* msg, int sz)
host_group_create	./host/host_group.c	/^host_group_create(int init) {$/;"	f	language:C	signature:(int init)
host_group_create	./host/host_group.h	/^struct host_group* host_group_create(int init);$/;"	p	language:C++	signature:(int init)
host_group_disjoin	./host/host_group.c	/^host_group_disjoin(struct host_group* g, int slot, int connection) {$/;"	f	language:C	signature:(struct host_group* g, int slot, int connection)
host_group_disjoin	./host/host_group.h	/^int host_group_disjoin(struct host_group* g, int slot, int connection); $/;"	p	language:C++	signature:(struct host_group* g, int slot, int connection)
host_group_free	./host/host_group.c	/^host_group_free(struct host_group* g) {$/;"	f	language:C	signature:(struct host_group* g)
host_group_free	./host/host_group.h	/^void host_group_free(struct host_group* g);$/;"	p	language:C++	signature:(struct host_group* g)
host_group_join	./host/host_group.c	/^host_group_join(struct host_group* g, int connection) {$/;"	f	language:C	signature:(struct host_group* g, int connection)
host_group_join	./host/host_group.h	/^int host_group_join(struct host_group* g, int connection);$/;"	p	language:C++	signature:(struct host_group* g, int connection)
host_id	./host/host_node.c	/^host_id() {$/;"	f	language:C
host_id	./host/host_node.h	/^uint16_t host_id();$/;"	p	language:C++	signature:()
host_info	./host/host_log.c	/^host_info(const char* fmt, ...) {$/;"	f	language:C	signature:(const char* fmt, ...)
host_info	./host/host_log.h	/^void host_info(const char* fmt, ...);$/;"	p	language:C++	signature:(const char* fmt, ...)
host_log_fini	./host/host_log.c	/^host_log_fini() {$/;"	f	language:C
host_log_fini	./host/host_log.h	/^void host_log_fini();$/;"	p	language:C++	signature:()
host_log_init	./host/host_log.c	/^host_log_init(const char* level) {$/;"	f	language:C	signature:(const char* level)
host_log_init	./host/host_log.h	/^int host_log_init();$/;"	p	language:C++	signature:()
host_log_level	./host/host_log.c	/^int host_log_level() {$/;"	f	language:C
host_log_level	./host/host_log.h	/^int host_log_level();$/;"	p	language:C++	signature:()
host_log_levelstr	./host/host_log.c	/^host_log_levelstr(int level) {$/;"	f	language:C	signature:(int level)
host_log_levelstr	./host/host_log.h	/^const char* host_log_levelstr(int level);$/;"	p	language:C++	signature:(int level)
host_log_setlevelstr	./host/host_log.c	/^host_log_setlevelstr(const char* level) {$/;"	f	language:C	signature:(const char* level)
host_log_setlevelstr	./host/host_log.h	/^int  host_log_setlevelstr(const char* level);$/;"	p	language:C++	signature:(const char* level)
host_me	./host/host_node.c	/^host_me() {$/;"	f	language:C
host_me	./host/host_node.h	/^struct host_node* host_me();$/;"	p	language:C++	signature:()
host_message	./host/host_message.h	/^struct host_message {$/;"	s	language:C++
host_message::len	./host/host_message.h	/^    uint32_t len; \/\/ msg length$/;"	m	language:C++	struct:host_message	access:public
host_message::msg	./host/host_message.h	/^    uint8_t msg[0];$/;"	m	language:C++	struct:host_message	access:public
host_message::type	./host/host_message.h	/^    int8_t type;  \/\/ see HMSGT_* define$/;"	m	language:C++	struct:host_message	access:public
host_net_close_socket	./host/host_net.c	/^void host_net_close_socket(int id) { $/;"	f	language:C	signature:(int id)
host_net_close_socket	./host/host_net.h	/^void host_net_close_socket(int id);$/;"	p	language:C++	signature:(int id)
host_net_connect	./host/host_net.c	/^host_net_connect(const char* addr, uint16_t port, bool block, int serviceid, int ut) { $/;"	f	language:C	signature:(const char* addr, uint16_t port, bool block, int serviceid, int ut)
host_net_connect	./host/host_net.h	/^int host_net_connect(const char* addr, uint16_t port, bool block, int serviceid, int ut);$/;"	p	language:C++	signature:(const char* addr, uint16_t port, bool block, int serviceid, int ut)
host_net_dropread	./host/host_net.c	/^void host_net_dropread(int id, int skip) { $/;"	f	language:C	signature:(int id, int skip)
host_net_dropread	./host/host_net.h	/^void host_net_dropread(int id, int skip);$/;"	p	language:C++	signature:(int id, int skip)
host_net_error	./host/host_net.c	/^const char* host_net_error(int err) { $/;"	f	language:C	signature:(int err)
host_net_error	./host/host_net.h	/^const char* host_net_error(int err);$/;"	p	language:C++	signature:(int err)
host_net_errorid	./host/host_net.c	/^int host_net_errorid() {$/;"	f	language:C
host_net_errorid	./host/host_net.h	/^int host_net_errorid();$/;"	p	language:C++	signature:()
host_net_fini	./host/host_net.c	/^host_net_fini() {$/;"	f	language:C
host_net_fini	./host/host_net.h	/^void host_net_fini();$/;"	p	language:C++	signature:()
host_net_init	./host/host_net.c	/^host_net_init(int max) {$/;"	f	language:C	signature:(int max)
host_net_init	./host/host_net.h	/^int host_net_init(int max);$/;"	p	language:C++	signature:(int max)
host_net_listen	./host/host_net.c	/^host_net_listen(const char* addr, uint16_t port, int serviceid, int ut) {$/;"	f	language:C	signature:(const char* addr, uint16_t port, int serviceid, int ut)
host_net_listen	./host/host_net.h	/^int host_net_listen(const char* addr, uint16_t port, int serviceid, int ut);$/;"	p	language:C++	signature:(const char* addr, uint16_t port, int serviceid, int ut)
host_net_max_socket	./host/host_net.c	/^int host_net_max_socket() { $/;"	f	language:C
host_net_max_socket	./host/host_net.h	/^int host_net_max_socket();$/;"	p	language:C++	signature:()
host_net_poll	./host/host_net.c	/^host_net_poll(int timeout) {$/;"	f	language:C	signature:(int timeout)
host_net_poll	./host/host_net.h	/^void host_net_poll(int timeout);$/;"	p	language:C++	signature:(int timeout)
host_net_read	./host/host_net.c	/^void* host_net_read(int id, int sz, int skip) { $/;"	f	language:C	signature:(int id, int sz, int skip)
host_net_read	./host/host_net.h	/^void* host_net_read(int id, int sz, int skip);$/;"	p	language:C++	signature:(int id, int sz, int skip)
host_net_send	./host/host_net.c	/^host_net_send(int id, void* data, int sz) { $/;"	f	language:C	signature:(int id, void* data, int sz)
host_net_send	./host/host_net.h	/^int host_net_send(int id, void* data, int sz);$/;"	p	language:C++	signature:(int id, void* data, int sz)
host_net_socket_address	./host/host_net.c	/^int host_net_socket_address(int id, uint32_t* addr, uint16_t* port) { $/;"	f	language:C	signature:(int id, uint32_t* addr, uint16_t* port)
host_net_socket_address	./host/host_net.h	/^int host_net_socket_address(int id, uint32_t* addr, uint16_t* port);$/;"	p	language:C++	signature:(int id, uint32_t* addr, uint16_t* port)
host_net_socket_isclosed	./host/host_net.c	/^int host_net_socket_isclosed(int id) {$/;"	f	language:C	signature:(int id)
host_net_socket_isclosed	./host/host_net.h	/^int host_net_socket_isclosed(int id);$/;"	p	language:C++	signature:(int id)
host_net_subscribe	./host/host_net.c	/^int host_net_subscribe(int id, bool read, bool write) { $/;"	f	language:C	signature:(int id, bool read, bool write)
host_net_subscribe	./host/host_net.h	/^int host_net_subscribe(int id, bool read, bool write);$/;"	p	language:C++	signature:(int id, bool read, bool write)
host_node	./host/host_node.h	/^struct host_node {$/;"	s	language:C++
host_node::__anon4::__anon5::sid	./host/host_node.h	/^            uint16_t sid:10;$/;"	m	language:C++	struct:host_node::__anon4::__anon5	access:public
host_node::__anon4::__anon5::tid	./host/host_node.h	/^            uint16_t tid:6;$/;"	m	language:C++	struct:host_node::__anon4::__anon5	access:public
host_node::__anon4::id	./host/host_node.h	/^        uint16_t id; \/\/ see HNODE_ID$/;"	m	language:C++	union:host_node::__anon4	access:public
host_node::addr	./host/host_node.h	/^    uint32_t addr;$/;"	m	language:C++	struct:host_node	access:public
host_node::connid	./host/host_node.h	/^    int connid;$/;"	m	language:C++	struct:host_node	access:public
host_node::gaddr	./host/host_node.h	/^    uint32_t gaddr;$/;"	m	language:C++	struct:host_node	access:public
host_node::gport	./host/host_node.h	/^    uint16_t gport;$/;"	m	language:C++	struct:host_node	access:public
host_node::load	./host/host_node.h	/^    int load;$/;"	m	language:C++	struct:host_node	access:public
host_node::port	./host/host_node.h	/^    uint16_t port;$/;"	m	language:C++	struct:host_node	access:public
host_node_disconnect	./host/host_node.c	/^host_node_disconnect(int connid) {$/;"	f	language:C	signature:(int connid)
host_node_disconnect	./host/host_node.h	/^int  host_node_disconnect(int connid);$/;"	p	language:C++	signature:(int connid)
host_node_fini	./host/host_node.c	/^host_node_fini() {$/;"	f	language:C
host_node_fini	./host/host_node.h	/^void host_node_fini();$/;"	p	language:C++	signature:()
host_node_foreach	./host/host_node.c	/^host_node_foreach(uint16_t tid, int (*cb)(const struct host_node*, void* ud), void* ud) {$/;"	f	language:C	signature:(uint16_t tid, int (*cb)(const struct host_node*, void* ud), void* ud)
host_node_foreach	./host/host_node.h	/^void host_node_foreach(uint16_t tid, int (*cb)(const struct host_node*, void* ud), void* ud);$/;"	p	language:C++	signature:(uint16_t tid, int (*cb)(const struct host_node*, void* ud), void* ud)
host_node_get	./host/host_node.c	/^host_node_get(uint16_t id) {$/;"	f	language:C	signature:(uint16_t id)
host_node_get	./host/host_node.h	/^const struct host_node* host_node_get(uint16_t id);$/;"	p	language:C++	signature:(uint16_t id)
host_node_init	./host/host_node.c	/^host_node_init() {$/;"	f	language:C
host_node_init	./host/host_node.h	/^int  host_node_init();$/;"	p	language:C++	signature:()
host_node_is_register	./host/host_node.c	/^host_node_is_register(uint16_t id) {$/;"	f	language:C	signature:(uint16_t id)
host_node_is_register	./host/host_node.h	/^bool host_node_is_register(uint16_t id);$/;"	p	language:C++	signature:(uint16_t id)
host_node_minload	./host/host_node.c	/^host_node_minload(uint16_t tid) {$/;"	f	language:C	signature:(uint16_t tid)
host_node_minload	./host/host_node.h	/^const struct host_node* host_node_minload(uint16_t tid);$/;"	p	language:C++	signature:(uint16_t tid)
host_node_register	./host/host_node.c	/^host_node_register(struct host_node* node) {$/;"	f	language:C	signature:(struct host_node* node)
host_node_register	./host/host_node.h	/^int  host_node_register(struct host_node* node);$/;"	p	language:C++	signature:(struct host_node* node)
host_node_register_types	./host/host_node.c	/^host_node_register_types(const char* types[], int n) {$/;"	f	language:C	signature:(const char* types[], int n)
host_node_register_types	./host/host_node.h	/^int  host_node_register_types(const char* types[], int n);$/;"	p	language:C++	signature:(const char* types[], int n)
host_node_typeid	./host/host_node.c	/^host_node_typeid(const char* name) {$/;"	f	language:C	signature:(const char* name)
host_node_typeid	./host/host_node.h	/^int  host_node_typeid(const char* name);$/;"	p	language:C++	signature:(const char* name)
host_node_typename	./host/host_node.c	/^host_node_typename(uint16_t tid) {$/;"	f	language:C	signature:(uint16_t tid)
host_node_typename	./host/host_node.h	/^const char* host_node_typename(uint16_t tid);$/;"	p	language:C++	signature:(uint16_t tid)
host_node_types	./host/host_node.c	/^host_node_types() {$/;"	f	language:C
host_node_types	./host/host_node.h	/^int  host_node_types();$/;"	p	language:C++	signature:()
host_node_unregister	./host/host_node.c	/^host_node_unregister(uint16_t id) {$/;"	f	language:C	signature:(uint16_t id)
host_node_unregister	./host/host_node.h	/^int  host_node_unregister(uint16_t id);$/;"	p	language:C++	signature:(uint16_t id)
host_node_updateload	./host/host_node.c	/^host_node_updateload(uint16_t id, int value) {$/;"	f	language:C	signature:(uint16_t id, int value)
host_node_updateload	./host/host_node.h	/^void host_node_updateload(uint16_t id, int value);$/;"	p	language:C++	signature:(uint16_t id, int value)
host_register_me	./host/host_node.c	/^host_register_me(struct host_node* me) {$/;"	f	language:C	signature:(struct host_node* me)
host_register_me	./host/host_node.h	/^int host_register_me(struct host_node* me);$/;"	p	language:C++	signature:(struct host_node* me)
host_reload_execute	./host/host_reload.c	/^host_reload_execute() {$/;"	f	language:C
host_reload_execute	./host/host_reload.h	/^void host_reload_execute();$/;"	p	language:C++	signature:()
host_reload_fini	./host/host_reload.c	/^host_reload_fini() {$/;"	f	language:C
host_reload_fini	./host/host_reload.h	/^void host_reload_fini();$/;"	p	language:C++	signature:()
host_reload_init	./host/host_reload.c	/^host_reload_init() {$/;"	f	language:C
host_reload_init	./host/host_reload.h	/^int  host_reload_init();$/;"	p	language:C++	signature:()
host_reload_prepare	./host/host_reload.c	/^host_reload_prepare(const char* names) {$/;"	f	language:C	signature:(const char* names)
host_reload_prepare	./host/host_reload.h	/^void host_reload_prepare(const char* names);$/;"	p	language:C++	signature:(const char* names)
host_start	./host/host.c	/^host_start() {$/;"	f	language:C
host_start	./host/host.h	/^void host_start();$/;"	p	language:C++	signature:()
host_stop	./host/host.c	/^host_stop() {$/;"	f	language:C
host_stop	./host/host.h	/^void host_stop();$/;"	p	language:C++	signature:()
host_strnode	./host/host_node.c	/^host_strnode(const struct host_node* node, char str[HNODESTR_MAX]) {$/;"	f	language:C	signature:(const struct host_node* node, char str[HNODESTR_MAX])
host_strnode	./host/host_node.h	/^const char* host_strnode(const struct host_node* node, char str[HNODESTR_MAX]);$/;"	p	language:C++	signature:(const struct host_node* node, char str[HNODESTR_MAX])
host_timer	./host/host_timer.c	/^struct host_timer {$/;"	s	language:C
host_timer::dirty	./host/host_timer.c	/^    bool dirty;$/;"	m	language:C	struct:host_timer	access:public
host_timer::eh	./host/host_timer.c	/^    struct _event_holder eh;$/;"	m	language:C	struct:host_timer	typeref:struct:host_timer::_event_holder	access:public
host_timer::elapsed_time	./host/host_timer.c	/^    uint64_t elapsed_time;$/;"	m	language:C	struct:host_timer	access:public
host_timer::start_time	./host/host_timer.c	/^    uint64_t start_time;$/;"	m	language:C	struct:host_timer	access:public
host_timer::trigger_time	./host/host_timer.c	/^    uint64_t trigger_time;$/;"	m	language:C	struct:host_timer	access:public
host_timer_dispatch_timeout	./host/host_timer.c	/^host_timer_dispatch_timeout() {$/;"	f	language:C
host_timer_dispatch_timeout	./host/host_timer.h	/^void host_timer_dispatch_timeout();$/;"	p	language:C++	signature:()
host_timer_fini	./host/host_timer.c	/^host_timer_fini() {$/;"	f	language:C
host_timer_fini	./host/host_timer.h	/^void host_timer_fini();$/;"	p	language:C++	signature:()
host_timer_init	./host/host_timer.c	/^host_timer_init() {$/;"	f	language:C
host_timer_init	./host/host_timer.h	/^int host_timer_init();$/;"	p	language:C++	signature:()
host_timer_max_timeout	./host/host_timer.c	/^host_timer_max_timeout() {$/;"	f	language:C
host_timer_max_timeout	./host/host_timer.h	/^int host_timer_max_timeout();$/;"	p	language:C++	signature:()
host_timer_now	./host/host_timer.c	/^host_timer_now() {$/;"	f	language:C
host_timer_now	./host/host_timer.h	/^uint64_t host_timer_now();$/;"	p	language:C++	signature:()
host_timer_register	./host/host_timer.c	/^host_timer_register(int serviceid, int interval) {$/;"	f	language:C	signature:(int serviceid, int interval)
host_timer_register	./host/host_timer.h	/^void host_timer_register(int serviceid, int interval);$/;"	p	language:C++	signature:(int serviceid, int interval)
host_warning	./host/host_log.c	/^host_warning(const char* fmt, ...) {$/;"	f	language:C	signature:(const char* fmt, ...)
host_warning	./host/host_log.h	/^void host_warning(const char* fmt, ...);$/;"	p	language:C++	signature:(const char* fmt, ...)
i	./test/test.c	/^        int i;$/;"	m	language:C	struct:Test::__anon1	access:public
id	./base/hashid.h	/^    int id;$/;"	m	language:C++	struct:_hashid_slot	access:public
id	./host/host_group.c	/^    int id;$/;"	m	language:C	struct:_slot	access:public
id	./host/host_node.h	/^        uint16_t id; \/\/ see HNODE_ID$/;"	m	language:C++	union:host_node::__anon4	access:public
id	./host/host_remote.c	/^    int id;$/;"	m	language:C	struct:remote	access:public
id	./test/test.c	/^        uint16_t id;$/;"	m	language:C	union:ID::__anon2	access:public
ids	./base/freeid.h	/^    int* ids;$/;"	m	language:C++	struct:freeid	access:public
init	./host/dlmodule.h	/^    int   (*init)(struct service* s);$/;"	m	language:C++	struct:dlmodule	access:public
interval	./host/host_timer.c	/^    int interval;$/;"	m	language:C	struct:_event	access:public
iscenter	./service/service_node.c	/^    bool iscenter;$/;"	m	language:C	struct:node	access:public
key	./message/user_message.h	/^    uint32_t key; \/\/ key of room$/;"	m	language:C++	struct:UM_createroom	access:public
key	./service/service_gamematch.c	/^    uint32_t key;$/;"	m	language:C	struct:gamematch	access:public
leasttime	./message/cli_message.h	/^    int8_t leasttime;  \/\/ least time of loading$/;"	m	language:C++	struct:UM_playloading	access:public
len	./base/stringsplice.h	/^    size_t len;$/;"	m	language:C++	struct:_str_splice	access:public
len	./base/stringtable.h	/^    size_t len;$/;"	m	language:C++	struct:_string	access:public
len	./host/host_message.h	/^    uint32_t len; \/\/ msg length$/;"	m	language:C++	struct:host_message	access:public
livetime	./service/service_gate.c	/^    int livetime;$/;"	m	language:C	struct:gate	access:public
load	./host/host_node.h	/^    int load;$/;"	m	language:C++	struct:host_node	access:public
loaditer	./host/host_node.c	/^    int loaditer;$/;"	m	language:C	struct:_array	access:public
log_init	./service/service_log.c	/^log_init(struct service* s) {$/;"	f	language:C	signature:(struct service* s)
log_service	./service/service_log.c	/^log_service(struct service* s, struct service_message* sm) {$/;"	f	language:C	signature:(struct service* s, struct service_message* sm)
loop	./host/host.c	/^    bool loop;$/;"	m	language:C	struct:host	access:public
lur	./lur/lur.c	/^struct lur {$/;"	s	language:C
lur::L	./lur/lur.c	/^    lua_State* L;$/;"	m	language:C	struct:lur	access:public
lur_create	./lur/lur.c	/^lur_create() {$/;"	f	language:C
lur_create	./lur/lur.h	/^struct lur* lur_create();$/;"	p	language:C++	signature:()
lur_dofile	./lur/lur.c	/^lur_dofile(struct lur* self, const char* file, const char* root) {$/;"	f	language:C	signature:(struct lur* self, const char* file, const char* root)
lur_dofile	./lur/lur.h	/^const char* lur_dofile(struct lur* self, const char* file, const char* root);$/;"	p	language:C++	signature:(struct lur* self, const char* file, const char* root)
lur_free	./lur/lur.c	/^lur_free(struct lur* self) {$/;"	f	language:C	signature:(struct lur* self)
lur_free	./lur/lur.h	/^void lur_free(struct lur* self);$/;"	p	language:C++	signature:(struct lur* self)
lur_getfloat	./lur/lur.c	/^lur_getfloat(struct lur* self, const char* key, float def) {$/;"	f	language:C	signature:(struct lur* self, const char* key, float def)
lur_getfloat	./lur/lur.h	/^float lur_getfloat(struct lur* self, const char* key, float def);$/;"	p	language:C++	signature:(struct lur* self, const char* key, float def)
lur_getint	./lur/lur.c	/^lur_getint(struct lur* self, const char* key, int def) {$/;"	f	language:C	signature:(struct lur* self, const char* key, int def)
lur_getint	./lur/lur.h	/^int lur_getint(struct lur* self, const char* key, int def);$/;"	p	language:C++	signature:(struct lur* self, const char* key, int def)
lur_getnode	./lur/lur.c	/^lur_getnode(struct lur* self, const char* key) {$/;"	f	language:C	signature:(struct lur* self, const char* key)
lur_getnode	./lur/lur.h	/^int lur_getnode(struct lur* self, const char* key);$/;"	p	language:C++	signature:(struct lur* self, const char* key)
lur_getstr	./lur/lur.c	/^lur_getstr(struct lur* self, const char* key, const char* def) {$/;"	f	language:C	signature:(struct lur* self, const char* key, const char* def)
lur_getstr	./lur/lur.h	/^const char* lur_getstr(struct lur* self, const char* key, const char* def);$/;"	p	language:C++	signature:(struct lur* self, const char* key, const char* def)
lur_nextnode	./lur/lur.c	/^lur_nextnode(struct lur* self) {$/;"	f	language:C	signature:(struct lur* self)
lur_nextnode	./lur/lur.h	/^int lur_nextnode(struct lur* self);$/;"	p	language:C++	signature:(struct lur* self)
lur_root	./lur/lur.c	/^lur_root(struct lur* self, const char* root) {$/;"	f	language:C	signature:(struct lur* self, const char* root)
lur_root	./lur/lur.h	/^int lur_root(struct lur* self, const char* root);$/;"	p	language:C++	signature:(struct lur* self, const char* root)
lur_unroot	./lur/lur.c	/^lur_unroot(struct lur* self) {$/;"	f	language:C	signature:(struct lur* self)
lur_unroot	./lur/lur.h	/^void lur_unroot(struct lur* self);$/;"	p	language:C++	signature:(struct lur* self)
main	./host/host_main.c	/^main(int argc, char* argv[]) {$/;"	f	language:C	signature:(int argc, char* argv[])
main	./net/test.c	/^int main(int argc, char* argv[]) {$/;"	f	language:C	signature:(int argc, char* argv[])
main	./test/test.c	/^main(int argc, char* argv[]) {$/;"	f	language:C	signature:(int argc, char* argv[])
main	./tool/shaco-cli.c	/^int main(int argc, char* argv[]) {$/;"	f	language:C	signature:(int argc, char* argv[])
mask	./net/net.c	/^    int mask;$/;"	m	language:C	struct:socket	access:public
matchplayer	./service/service_gamematch.c	/^struct matchplayer {$/;"	s	language:C
matchplayer::charid	./service/service_gamematch.c	/^    uint32_t charid;$/;"	m	language:C	struct:matchplayer	access:public
matchplayer::name	./service/service_gamematch.c	/^    char name[NAME_MAX];$/;"	m	language:C	struct:matchplayer	access:public
max	./net/net.c	/^    int max;$/;"	m	language:C	struct:net	access:public
max	./net/netbuf.c	/^    int max;$/;"	m	language:C	struct:netbuf	access:public
max	./service/service_benchmark.c	/^    int max;$/;"	m	language:C	struct:benchmark	access:public
maxfd	./net/socket_select.h	/^    int maxfd;$/;"	m	language:C++	struct:np_state	access:public
me	./host/host_node.c	/^    uint16_t me; $/;"	m	language:C	struct:_node_holder	access:public
member	./message/cli_message.h	/^    struct tmember_brief member;$/;"	m	language:C++	struct:UM_playloading	typeref:struct:UM_playloading::tmember_brief	access:public
member	./message/cli_message.h	/^    struct tmember_detail member;$/;"	m	language:C++	struct:UM_playbegin	typeref:struct:UM_playbegin::tmember_detail	access:public
member	./message/cli_message.h	/^    struct tmember_detail member;$/;"	m	language:C++	struct:UM_playjoin	typeref:struct:UM_playjoin::tmember_detail	access:public
memrw	./base/memrw.h	/^struct memrw {$/;"	s	language:C++
memrw::begin	./base/memrw.h	/^    char* begin;$/;"	m	language:C++	struct:memrw	access:public
memrw::ptr	./base/memrw.h	/^    char* ptr;$/;"	m	language:C++	struct:memrw	access:public
memrw::sz	./base/memrw.h	/^    int sz;$/;"	m	language:C++	struct:memrw	access:public
memrw_init	./base/memrw.h	/^memrw_init(struct memrw* rw, void* data, size_t sz) {$/;"	f	language:C++	signature:(struct memrw* rw, void* data, size_t sz)
memrw_pos	./base/memrw.h	/^memrw_pos(struct memrw* rw, size_t sz) {$/;"	f	language:C++	signature:(struct memrw* rw, size_t sz)
memrw_read	./base/memrw.h	/^memrw_read(struct memrw* rw, void* data, size_t sz) {$/;"	f	language:C++	signature:(struct memrw* rw, void* data, size_t sz)
memrw_write	./base/memrw.h	/^memrw_write(struct memrw* rw, void* data, size_t sz) {$/;"	f	language:C++	signature:(struct memrw* rw, void* data, size_t sz)
msg	./host/host_gate.h	/^    void* msg;$/;"	m	language:C++	struct:gate_message	access:public
msg	./host/host_message.h	/^    uint8_t msg[0];$/;"	m	language:C++	struct:host_message	access:public
msg	./host/host_service.h	/^    void* msg;$/;"	m	language:C++	struct:service_message	access:public
n	./base/stringsplice.h	/^    size_t n;$/;"	m	language:C++	struct:stringsplice	access:public
n	./message/user_message.h	/^    uint16_t n;$/;"	m	language:C++	struct:UM_node_subs	access:public
name	./host/dlmodule.h	/^    char* name;$/;"	m	language:C++	struct:dlmodule	access:public
name	./host/host_node.c	/^    char name[HNODE_NAME_MAX];$/;"	m	language:C	struct:_type	access:public
name	./message/sharetype.h	/^    char name[NAME_MAX];$/;"	m	language:C++	struct:chardata	access:public
name	./message/sharetype.h	/^    char name[NAME_MAX];$/;"	m	language:C++	struct:tmember_brief	access:public
name	./service/service_cmdctl.c	/^    const char* name;$/;"	m	language:C	struct:command	access:public
name	./service/service_gamematch.c	/^    char name[NAME_MAX];$/;"	m	language:C	struct:matchplayer	access:public
ne	./net/net.c	/^    struct net_message* ne; $/;"	m	language:C	struct:net	typeref:struct:net::net_message	access:public
net	./host/dlmodule.h	/^    void  (*net)(struct service* s, struct net_message* nm);$/;"	m	language:C++	struct:dlmodule	access:public
net	./net/net.c	/^struct net {$/;"	s	language:C
net::error	./net/net.c	/^    int error;$/;"	m	language:C	struct:net	access:public
net::ev	./net/net.c	/^    struct np_event* ev;$/;"	m	language:C	struct:net	typeref:struct:net::np_event	access:public
net::free_socket	./net/net.c	/^    struct socket* free_socket;$/;"	m	language:C	struct:net	typeref:struct:net::socket	access:public
net::max	./net/net.c	/^    int max;$/;"	m	language:C	struct:net	access:public
net::ne	./net/net.c	/^    struct net_message* ne; $/;"	m	language:C	struct:net	typeref:struct:net::net_message	access:public
net::nevent	./net/net.c	/^    int nevent;$/;"	m	language:C	struct:net	access:public
net::np	./net/net.c	/^    struct np_state np;$/;"	m	language:C	struct:net	typeref:struct:net::np_state	access:public
net::rpool	./net/net.c	/^    struct netbuf* rpool; $/;"	m	language:C	struct:net	typeref:struct:net::netbuf	access:public
net::sockets	./net/net.c	/^    struct socket* sockets;$/;"	m	language:C	struct:net	typeref:struct:net::socket	access:public
net::tail_socket	./net/net.c	/^    struct socket* tail_socket;$/;"	m	language:C	struct:net	typeref:struct:net::socket	access:public
net_close_socket	./net/net.c	/^net_close_socket(struct net* self, int id) {$/;"	f	language:C	signature:(struct net* self, int id)
net_close_socket	./net/net.h	/^void net_close_socket(struct net* self, int id);$/;"	p	language:C++	signature:(struct net* self, int id)
net_connect	./net/net.c	/^net_connect(struct net* self, uint32_t addr, uint16_t port, bool block, int ud, int ut) {$/;"	f	language:C	signature:(struct net* self, uint32_t addr, uint16_t port, bool block, int ud, int ut)
net_connect	./net/net.h	/^int net_connect(struct net* self, uint32_t addr, uint16_t port, bool block, int ud, int ut);$/;"	p	language:C++	signature:(struct net* self, uint32_t addr, uint16_t port, bool block, int ud, int ut)
net_create	./net/net.c	/^net_create(int max, int block_size) {$/;"	f	language:C	signature:(int max, int block_size)
net_create	./net/net.h	/^struct net* net_create(int max, int block_size);$/;"	p	language:C++	signature:(int max, int block_size)
net_dropread	./net/net.c	/^net_dropread(struct net* self, int id, int skip) {$/;"	f	language:C	signature:(struct net* self, int id, int skip)
net_dropread	./net/net.h	/^void net_dropread(struct net* self, int id, int skip);$/;"	p	language:C++	signature:(struct net* self, int id, int skip)
net_error	./net/net.c	/^net_error(struct net* self, int err) {$/;"	f	language:C	signature:(struct net* self, int err)
net_error	./net/net.h	/^const char* net_error(struct net* self, int err);$/;"	p	language:C++	signature:(struct net* self, int err)
net_errorid	./net/net.c	/^net_errorid(struct net* self) {$/;"	f	language:C	signature:(struct net* self)
net_errorid	./net/net.h	/^int net_errorid(struct net* self);$/;"	p	language:C++	signature:(struct net* self)
net_free	./net/net.c	/^net_free(struct net* self) {$/;"	f	language:C	signature:(struct net* self)
net_free	./net/net.h	/^void net_free(struct net* self);$/;"	p	language:C++	signature:(struct net* self)
net_getevents	./net/net.c	/^net_getevents(struct net* self, struct net_message** e) {$/;"	f	language:C	signature:(struct net* self, struct net_message** e)
net_getevents	./net/net.h	/^int net_getevents(struct net* self, struct net_message** e);$/;"	p	language:C++	signature:(struct net* self, struct net_message** e)
net_listen	./net/net.c	/^net_listen(struct net* self, uint32_t addr, uint16_t port, int ud, int ut) {$/;"	f	language:C	signature:(struct net* self, uint32_t addr, uint16_t port, int ud, int ut)
net_listen	./net/net.h	/^int net_listen(struct net* self, uint32_t addr, uint16_t port, int ud, int ut);$/;"	p	language:C++	signature:(struct net* self, uint32_t addr, uint16_t port, int ud, int ut)
net_max_socket	./net/net.c	/^net_max_socket(struct net* self) {$/;"	f	language:C	signature:(struct net* self)
net_max_socket	./net/net.h	/^int net_max_socket(struct net* self);$/;"	p	language:C++	signature:(struct net* self)
net_message	./net/net_message.h	/^struct net_message {$/;"	s	language:C++
net_message::connid	./net/net_message.h	/^    int connid;$/;"	m	language:C++	struct:net_message	access:public
net_message::error	./net/net_message.h	/^    int error;$/;"	m	language:C++	struct:net_message	access:public
net_message::fd	./net/net_message.h	/^    int fd;$/;"	m	language:C++	struct:net_message	access:public
net_message::type	./net/net_message.h	/^    int type;     \/\/ see NETE$/;"	m	language:C++	struct:net_message	access:public
net_message::ud	./net/net_message.h	/^    int ud;$/;"	m	language:C++	struct:net_message	access:public
net_message::ut	./net/net_message.h	/^    int ut;$/;"	m	language:C++	struct:net_message	access:public
net_poll	./net/net.c	/^net_poll(struct net* self, int timeout) {$/;"	f	language:C	signature:(struct net* self, int timeout)
net_poll	./net/net.h	/^int net_poll(struct net* self, int timeout);$/;"	p	language:C++	signature:(struct net* self, int timeout)
net_read	./net/net.c	/^net_read(struct net* self, int id, int sz, int skip) {$/;"	f	language:C	signature:(struct net* self, int id, int sz, int skip)
net_read	./net/net.h	/^void* net_read(struct net* self, int id, int size, int skip);$/;"	p	language:C++	signature:(struct net* self, int id, int size, int skip)
net_send	./net/net.c	/^net_send(struct net* self, int id, void* data, int sz) {$/;"	f	language:C	signature:(struct net* self, int id, void* data, int sz)
net_send	./net/net.h	/^int net_send(struct net* self, int id, void* data, int sz);$/;"	p	language:C++	signature:(struct net* self, int id, void* data, int sz)
net_socket_address	./net/net.c	/^net_socket_address(struct net* self, int id, uint32_t* addr, uint16_t* port) {$/;"	f	language:C	signature:(struct net* self, int id, uint32_t* addr, uint16_t* port)
net_socket_address	./net/net.h	/^int net_socket_address(struct net* self, int id, uint32_t* addr, uint16_t* port);$/;"	p	language:C++	signature:(struct net* self, int id, uint32_t* addr, uint16_t* port)
net_socket_isclosed	./net/net.c	/^net_socket_isclosed(struct net* self, int id) {$/;"	f	language:C	signature:(struct net* self, int id)
net_socket_isclosed	./net/net.h	/^int net_socket_isclosed(struct net* self, int id);$/;"	p	language:C++	signature:(struct net* self, int id)
net_subscribe	./net/net.c	/^net_subscribe(struct net* self, int id, bool read, bool write) {$/;"	f	language:C	signature:(struct net* self, int id, bool read, bool write)
net_subscribe	./net/net.h	/^int net_subscribe(struct net* self, int id, bool read, bool write);$/;"	p	language:C++	signature:(struct net* self, int id, bool read, bool write)
netbuf	./net/netbuf.c	/^struct netbuf {$/;"	s	language:C
netbuf::block_size	./net/netbuf.c	/^    int block_size;$/;"	m	language:C	struct:netbuf	access:public
netbuf::blocks	./net/netbuf.c	/^    char blocks[0];$/;"	m	language:C	struct:netbuf	access:public
netbuf::max	./net/netbuf.c	/^    int max;$/;"	m	language:C	struct:netbuf	access:public
netbuf_alloc_block	./net/netbuf.c	/^netbuf_alloc_block(struct netbuf* self, int id) {$/;"	f	language:C	signature:(struct netbuf* self, int id)
netbuf_alloc_block	./net/netbuf.h	/^struct netbuf_block* netbuf_alloc_block(struct netbuf* self, int id);$/;"	p	language:C++	signature:(struct netbuf* self, int id)
netbuf_block	./net/netbuf.h	/^struct netbuf_block {$/;"	s	language:C++
netbuf_block::rptr	./net/netbuf.h	/^    int rptr;$/;"	m	language:C++	struct:netbuf_block	access:public
netbuf_block::sz	./net/netbuf.h	/^    int sz;$/;"	m	language:C++	struct:netbuf_block	access:public
netbuf_block::wptr	./net/netbuf.h	/^    int wptr;$/;"	m	language:C++	struct:netbuf_block	access:public
netbuf_create	./net/netbuf.c	/^netbuf_create(int max, int block_size) {$/;"	f	language:C	signature:(int max, int block_size)
netbuf_create	./net/netbuf.h	/^struct netbuf* netbuf_create(int max, int block_size);$/;"	p	language:C++	signature:(int max, int block_size)
netbuf_free	./net/netbuf.c	/^netbuf_free(struct netbuf* self) {$/;"	f	language:C	signature:(struct netbuf* self)
netbuf_free	./net/netbuf.h	/^void netbuf_free(struct netbuf* self);$/;"	p	language:C++	signature:(struct netbuf* self)
netbuf_free_block	./net/netbuf.c	/^netbuf_free_block(struct netbuf* self, struct netbuf_block* block) {$/;"	f	language:C	signature:(struct netbuf* self, struct netbuf_block* block)
netbuf_free_block	./net/netbuf.h	/^void netbuf_free_block(struct netbuf* self, struct netbuf_block* block);$/;"	p	language:C++	signature:(struct netbuf* self, struct netbuf_block* block)
nevent	./net/net.c	/^    int nevent;$/;"	m	language:C	struct:net	access:public
next	./base/hashid.h	/^    struct _hashid_slot* next;$/;"	m	language:C++	struct:_hashid_slot	typeref:struct:_hashid_slot::_hashid_slot	access:public
next	./base/stringtable.h	/^    struct _string* next;$/;"	m	language:C++	struct:_string	typeref:struct:_string::_string	access:public
next	./net/net.c	/^    struct sbuffer* next;$/;"	m	language:C	struct:sbuffer	typeref:struct:sbuffer::sbuffer	access:public
next_time	./host/host_timer.c	/^    uint64_t next_time;$/;"	m	language:C	struct:_event	access:public
node	./service/service_node.c	/^struct node {$/;"	s	language:C
node::center_or_cli_service	./service/service_node.c	/^    int center_or_cli_service;$/;"	m	language:C	struct:node	access:public
node::iscenter	./service/service_node.c	/^    bool iscenter;$/;"	m	language:C	struct:node	access:public
node_create	./service/service_node.c	/^node_create() {$/;"	f	language:C
node_free	./service/service_node.c	/^node_free(struct node* self) {$/;"	f	language:C	signature:(struct node* self)
node_init	./service/service_node.c	/^node_init(struct service* s) {$/;"	f	language:C	signature:(struct service* s)
node_message	./service/node_type.h	/^struct node_message {$/;"	s	language:C++
node_message::hn	./service/node_type.h	/^    const struct host_node* hn;$/;"	m	language:C++	struct:node_message	typeref:struct:node_message::host_node	access:public
node_message::um	./service/node_type.h	/^    struct UM_base* um;$/;"	m	language:C++	struct:node_message	typeref:struct:node_message::UM_base	access:public
node_net	./service/service_node.c	/^node_net(struct service* s, struct net_message* nm) {$/;"	f	language:C	signature:(struct service* s, struct net_message* nm)
node_nodemsg	./service/service_node.c	/^node_nodemsg(struct service* s, int id, void* msg, int sz) {$/;"	f	language:C	signature:(struct service* s, int id, void* msg, int sz)
nodemsg	./host/dlmodule.h	/^    void  (*nodemsg)(struct service* s, int id, void* msg, int sz);$/;"	m	language:C++	struct:dlmodule	access:public
nodes	./host/host_node.c	/^    struct _array* nodes;$/;"	m	language:C	struct:_node_holder	typeref:struct:_node_holder::_array	access:public
nodes	./host/host_remote.c	/^    struct remote* nodes[REMOTE_MAX];$/;"	m	language:C	struct:remote_holder	typeref:struct:remote_holder::remote	access:public
np	./net/net.c	/^    struct np_state np;$/;"	m	language:C	struct:net	typeref:struct:net::np_state	access:public
np_add	./net/netpoll.h	/^static int np_add(struct np_state* np, int fd, int mask, void* ud);$/;"	p	language:C++	signature:(struct np_state* np, int fd, int mask, void* ud)
np_add	./net/socket_epoll.h	/^np_add(struct np_state* np, int fd, int mask, void* ud) {$/;"	f	language:C++	signature:(struct np_state* np, int fd, int mask, void* ud)
np_add	./net/socket_select.h	/^np_add(struct np_state* np, int fd, int mask, void* ud) {$/;"	f	language:C++	signature:(struct np_state* np, int fd, int mask, void* ud)
np_del	./net/netpoll.h	/^static int np_del(struct np_state* np, int fd); $/;"	p	language:C++	signature:(struct np_state* np, int fd)
np_del	./net/socket_epoll.h	/^np_del(struct np_state* np, int fd) {$/;"	f	language:C++	signature:(struct np_state* np, int fd)
np_del	./net/socket_select.h	/^np_del(struct np_state* np, int fd) {$/;"	f	language:C++	signature:(struct np_state* np, int fd)
np_event	./net/netpoll.h	/^struct np_event {$/;"	s	language:C++
np_event::read	./net/netpoll.h	/^    bool read;$/;"	m	language:C++	struct:np_event	access:public
np_event::ud	./net/netpoll.h	/^    void* ud;$/;"	m	language:C++	struct:np_event	access:public
np_event::write	./net/netpoll.h	/^    bool write;$/;"	m	language:C++	struct:np_event	access:public
np_fini	./net/netpoll.h	/^static void np_fini(struct np_state* np);$/;"	p	language:C++	signature:(struct np_state* np)
np_fini	./net/socket_epoll.h	/^np_fini(struct np_state* np) {$/;"	f	language:C++	signature:(struct np_state* np)
np_fini	./net/socket_select.h	/^np_fini(struct np_state* np) {$/;"	f	language:C++	signature:(struct np_state* np)
np_init	./net/netpoll.h	/^static int np_init(struct np_state* np, int max);$/;"	p	language:C++	signature:(struct np_state* np, int max)
np_init	./net/socket_epoll.h	/^np_init(struct np_state* np, int max) {$/;"	f	language:C++	signature:(struct np_state* np, int max)
np_init	./net/socket_select.h	/^np_init(struct np_state* np, int max) {$/;"	f	language:C++	signature:(struct np_state* np, int max)
np_mod	./net/netpoll.h	/^static int np_mod(struct np_state* np, int fd, int mask, void* ud); $/;"	p	language:C++	signature:(struct np_state* np, int fd, int mask, void* ud)
np_mod	./net/socket_epoll.h	/^np_mod(struct np_state* np, int fd, int mask, void* ud) {$/;"	f	language:C++	signature:(struct np_state* np, int fd, int mask, void* ud)
np_mod	./net/socket_select.h	/^np_mod(struct np_state* np, int fd, int mask, void* ud) {$/;"	f	language:C++	signature:(struct np_state* np, int fd, int mask, void* ud)
np_poll	./net/netpoll.h	/^static int np_poll(struct np_state* np, struct np_event* e, int max, int timeout);$/;"	p	language:C++	signature:(struct np_state* np, struct np_event* e, int max, int timeout)
np_poll	./net/socket_epoll.h	/^np_poll(struct np_state* np, struct np_event* e, int max, int timeout) {$/;"	f	language:C++	signature:(struct np_state* np, struct np_event* e, int max, int timeout)
np_poll	./net/socket_select.h	/^np_poll(struct np_state* np, struct np_event* e, int max, int timeout) {$/;"	f	language:C++	signature:(struct np_state* np, struct np_event* e, int max, int timeout)
np_state	./net/socket_epoll.h	/^struct np_state {$/;"	s	language:C++
np_state	./net/socket_select.h	/^struct np_state {$/;"	s	language:C++
np_state::cap	./net/socket_select.h	/^    int cap; $/;"	m	language:C++	struct:np_state	access:public
np_state::epoll_fd	./net/socket_epoll.h	/^    int epoll_fd;$/;"	m	language:C++	struct:np_state	access:public
np_state::ev	./net/socket_epoll.h	/^    struct epoll_event* ev;$/;"	m	language:C++	struct:np_state	typeref:struct:np_state::epoll_event	access:public
np_state::maxfd	./net/socket_select.h	/^    int maxfd;$/;"	m	language:C++	struct:np_state	access:public
np_state::rfds	./net/socket_select.h	/^    fd_set rfds;$/;"	m	language:C++	struct:np_state	access:public
np_state::rtmp	./net/socket_select.h	/^    fd_set rtmp;$/;"	m	language:C++	struct:np_state	access:public
np_state::ud	./net/socket_select.h	/^    void** ud; $/;"	m	language:C++	struct:np_state	access:public
np_state::wfds	./net/socket_select.h	/^    fd_set wfds;$/;"	m	language:C++	struct:np_state	access:public
np_state::wtmp	./net/socket_select.h	/^    fd_set wtmp;$/;"	m	language:C++	struct:np_state	access:public
nslot	./host/host_group.c	/^    int nslot;$/;"	m	language:C	struct:host_group	access:public
p	./base/hashid.h	/^    struct _hashid_slot* p;$/;"	m	language:C++	struct:hashid	typeref:struct:hashid::_hashid_slot	access:public
p	./base/stringsplice.h	/^    const char* p;$/;"	m	language:C++	struct:_str_splice	access:public
p	./base/stringsplice.h	/^    struct _str_splice p[_STRSPLICE_MAX];$/;"	m	language:C++	struct:stringsplice	typeref:struct:stringsplice::_str_splice	access:public
p	./host/host_gate.c	/^    struct gate_client* p;$/;"	m	language:C	struct:gate	typeref:struct:gate::gate_client	access:public
p	./host/host_node.c	/^    struct host_node* p;$/;"	m	language:C	struct:_array	typeref:struct:_array::host_node	access:public
p	./host/host_timer.c	/^    struct _event* p;$/;"	m	language:C	struct:_event_holder	typeref:struct:_event_holder::_event	access:public
p	./service/service_centers.c	/^    uint16_t* p;$/;"	m	language:C	struct:_array	access:public
p	./service/service_gamematch.c	/^    struct matchplayer p;$/;"	m	language:C	struct:gamematch	typeref:struct:gamematch::matchplayer	access:public
p	./world/player.c	/^    struct player* p;$/;"	m	language:C	struct:player_holder	typeref:struct:player_holder::player	access:public
packetsz	./service/service_benchmark.c	/^    int packetsz;$/;"	m	language:C	struct:benchmark	access:public
pl	./service/worldhelper.h	/^    struct player* pl;$/;"	m	language:C++	struct:player_message	typeref:struct:player_message::player	access:public
player	./world/player.h	/^struct player {$/;"	s	language:C++
player::cid	./world/player.h	/^    uint16_t cid;$/;"	m	language:C++	struct:player	access:public
player::data	./world/player.h	/^    struct chardata data;$/;"	m	language:C++	struct:player	typeref:struct:player::chardata	access:public
player::gid	./world/player.h	/^    uint16_t gid;$/;"	m	language:C++	struct:player	access:public
player::status	./world/player.h	/^    int status;$/;"	m	language:C++	struct:player	access:public
player_holder	./world/player.c	/^struct player_holder {$/;"	s	language:C
player_holder::cmax	./world/player.c	/^    int cmax;$/;"	m	language:C	struct:player_holder	access:public
player_holder::fi	./world/player.c	/^    struct freeid fi;$/;"	m	language:C	struct:player_holder	typeref:struct:player_holder::freeid	access:public
player_holder::gmax	./world/player.c	/^    int gmax;$/;"	m	language:C	struct:player_holder	access:public
player_holder::hi	./world/player.c	/^    struct hashid hi;$/;"	m	language:C	struct:player_holder	typeref:struct:player_holder::hashid	access:public
player_holder::hmax	./world/player.c	/^    int hmax;$/;"	m	language:C	struct:player_holder	access:public
player_holder::p	./world/player.c	/^    struct player* p;$/;"	m	language:C	struct:player_holder	typeref:struct:player_holder::player	access:public
player_message	./service/worldhelper.h	/^struct player_message {$/;"	s	language:C++
player_message::hn	./service/worldhelper.h	/^    const struct host_node* hn;$/;"	m	language:C++	struct:player_message	typeref:struct:player_message::host_node	access:public
player_message::pl	./service/worldhelper.h	/^    struct player* pl;$/;"	m	language:C++	struct:player_message	typeref:struct:player_message::player	access:public
player_message::um	./service/worldhelper.h	/^    struct UM_base* um;$/;"	m	language:C++	struct:player_message	typeref:struct:player_message::UM_base	access:public
port	./host/host_node.h	/^    uint16_t port;$/;"	m	language:C++	struct:host_node	access:public
port	./message/user_message.h	/^    uint16_t port;$/;"	m	language:C++	struct:UM_node_notify	access:public
port	./message/user_message.h	/^    uint16_t port;$/;"	m	language:C++	struct:UM_node_reg	access:public
port	./message/user_message.h	/^    uint16_t port;$/;"	m	language:C++	struct:UM_node_regok	access:public
port	./net/net.c	/^    uint16_t port;$/;"	m	language:C	struct:socket	access:public
ptr	./base/memrw.h	/^    char* ptr;$/;"	m	language:C++	struct:memrw	access:public
ptr	./net/net.c	/^    char* ptr;$/;"	m	language:C	struct:sbuffer	access:public
query	./service/service_benchmark.c	/^    int query;$/;"	m	language:C	struct:benchmark	access:public
query_done	./service/service_benchmark.c	/^    int query_done;$/;"	m	language:C	struct:benchmark	access:public
query_send	./service/service_benchmark.c	/^    int query_send;$/;"	m	language:C	struct:benchmark	access:public
rb	./net/net.c	/^    struct netbuf_block* rb;$/;"	m	language:C	struct:socket	typeref:struct:socket::netbuf_block	access:public
read	./net/netpoll.h	/^    bool read;$/;"	m	language:C++	struct:np_event	access:public
reason	./message/cli_message.h	/^    int8_t reason; \/\/ enum PLAY_UNJOIN_T$/;"	m	language:C++	struct:UM_playunjoin	access:public
reload	./host/dlmodule.h	/^    int   (*reload)(struct service* s);$/;"	m	language:C++	struct:dlmodule	access:public
reload_cache	./host/host_reload.c	/^struct reload_cache {$/;"	s	language:C
reload_cache::services	./host/host_reload.c	/^    int services[CACHE_MAX];$/;"	m	language:C	struct:reload_cache	access:public
reload_cache::size	./host/host_reload.c	/^    int size;$/;"	m	language:C	struct:reload_cache	access:public
remote	./host/host_remote.c	/^struct remote {$/;"	s	language:C
remote::connid	./host/host_remote.c	/^    int connid;$/;"	m	language:C	struct:remote	access:public
remote::data	./host/host_remote.c	/^    void* data;$/;"	m	language:C	struct:remote	access:public
remote::id	./host/host_remote.c	/^    int id;$/;"	m	language:C	struct:remote	access:public
remote::sign	./host/host_remote.c	/^    int sign; $/;"	m	language:C	struct:remote	access:public
remote::sz	./host/host_remote.c	/^    size_t sz;$/;"	m	language:C	struct:remote	access:public
remote_create	./host/host_remote.c	/^remote_create(int connid) {$/;"	f	language:C	signature:(int connid)
remote_create	./host/host_remote.h	/^int remote_create(int connid);$/;"	p	language:C++	signature:(int connid)
remote_destroy	./host/host_remote.c	/^remote_destroy(int connid) {$/;"	f	language:C	signature:(int connid)
remote_destroy	./host/host_remote.h	/^int remote_destroy(int connid);$/;"	p	language:C++	signature:(int connid)
remote_fini	./host/host_remote.c	/^remote_fini() {$/;"	f	language:C
remote_fini	./host/host_remote.h	/^void remote_fini();$/;"	p	language:C++	signature:()
remote_handle	./host/host_remote.c	/^remote_handle(int connid, struct host_message* hmsg) {$/;"	f	language:C	signature:(int connid, struct host_message* hmsg)
remote_handle	./host/host_remote.h	/^void remote_handle(int connid, struct host_message* hmsg);$/;"	p	language:C++	signature:(int connid, struct host_message* hmsg)
remote_holder	./host/host_remote.c	/^struct remote_holder {$/;"	s	language:C
remote_holder::nodes	./host/host_remote.c	/^    struct remote* nodes[REMOTE_MAX];$/;"	m	language:C	struct:remote_holder	typeref:struct:remote_holder::remote	access:public
remote_init	./host/host_remote.c	/^remote_init() {$/;"	f	language:C
remote_init	./host/host_remote.h	/^void remote_init();$/;"	p	language:C++	signature:()
remote_multicast	./host/host_remote.c	/^remote_multicast(int sign, struct host_message* hmsg) {$/;"	f	language:C	signature:(int sign, struct host_message* hmsg)
remote_multicast	./host/host_remote.h	/^void remote_multicast(int sign, struct host_message* hmsg);$/;"	p	language:C++	signature:(int sign, struct host_message* hmsg)
remote_send	./host/host_remote.c	/^remote_send(int id, struct host_message* hmsg) {$/;"	f	language:C	signature:(int id, struct host_message* hmsg)
remote_send	./host/host_remote.h	/^void remote_send(int id, struct host_message* hmsg);$/;"	p	language:C++	signature:(int id, struct host_message* hmsg)
rfds	./net/socket_select.h	/^    fd_set rfds;$/;"	m	language:C++	struct:np_state	access:public
rpool	./net/net.c	/^    struct netbuf* rpool; $/;"	m	language:C	struct:net	typeref:struct:net::netbuf	access:public
rptr	./net/netbuf.h	/^    int rptr;$/;"	m	language:C++	struct:netbuf_block	access:public
rtmp	./net/socket_select.h	/^    fd_set rtmp;$/;"	m	language:C++	struct:np_state	access:public
sbuffer	./net/net.c	/^struct sbuffer {$/;"	s	language:C
sbuffer::data	./net/net.c	/^    char data[0];$/;"	m	language:C	struct:sbuffer	access:public
sbuffer::next	./net/net.c	/^    struct sbuffer* next;$/;"	m	language:C	struct:sbuffer	typeref:struct:sbuffer::sbuffer	access:public
sbuffer::ptr	./net/net.c	/^    char* ptr;$/;"	m	language:C	struct:sbuffer	access:public
sbuffer::sz	./net/net.c	/^    int sz;$/;"	m	language:C	struct:sbuffer	access:public
sers	./host/host_service.c	/^    struct array* sers;$/;"	m	language:C	struct:service_holder	typeref:struct:service_holder::array	access:public
server	./service/service_cmds.c	/^struct server {$/;"	s	language:C
server::ctl_service	./service/service_cmds.c	/^    int ctl_service;$/;"	m	language:C	struct:server	access:public
service	./host/dlmodule.h	/^    void  (*service)(struct service* s, struct service_message* sm);$/;"	m	language:C++	struct:dlmodule	access:public
service	./host/host_service.h	/^struct service {$/;"	s	language:C++
service::dl	./host/host_service.h	/^    struct dlmodule dl;$/;"	m	language:C++	struct:service	typeref:struct:service::dlmodule	access:public
service::serviceid	./host/host_service.h	/^    int serviceid; \/\/ >= 0, will not change since loaded$/;"	m	language:C++	struct:service	access:public
service_fini	./host/host_service.c	/^service_fini() {$/;"	f	language:C
service_fini	./host/host_service.h	/^void service_fini();$/;"	p	language:C++	signature:()
service_holder	./host/host_service.c	/^struct service_holder {$/;"	s	language:C
service_holder::sers	./host/host_service.c	/^    struct array* sers;$/;"	m	language:C	struct:service_holder	typeref:struct:service_holder::array	access:public
service_init	./host/host_service.c	/^service_init() {$/;"	f	language:C
service_init	./host/host_service.h	/^int service_init();$/;"	p	language:C++	signature:()
service_load	./host/host_service.c	/^service_load(const char* name) {$/;"	f	language:C	signature:(const char* name)
service_load	./host/host_service.h	/^int service_load(const char* name);$/;"	p	language:C++	signature:(const char* name)
service_message	./host/host_service.h	/^struct service_message {$/;"	s	language:C++
service_message::msg	./host/host_service.h	/^    void* msg;$/;"	m	language:C++	struct:service_message	access:public
service_message::sessionid	./host/host_service.h	/^    uint32_t sessionid;$/;"	m	language:C++	struct:service_message	access:public
service_message::source	./host/host_service.h	/^    int source;$/;"	m	language:C++	struct:service_message	access:public
service_message::sz	./host/host_service.h	/^    int sz;$/;"	m	language:C++	struct:service_message	access:public
service_notify_net	./host/host_service.c	/^service_notify_net(int serviceid, struct net_message* nm) {$/;"	f	language:C	signature:(int serviceid, struct net_message* nm)
service_notify_net	./host/host_service.h	/^int service_notify_net(int serviceid, struct net_message* nm);$/;"	p	language:C++	signature:(int serviceid, struct net_message* nm)
service_notify_nodemsg	./host/host_service.c	/^service_notify_nodemsg(int serviceid, int id, void* msg, int sz) {$/;"	f	language:C	signature:(int serviceid, int id, void* msg, int sz)
service_notify_nodemsg	./host/host_service.h	/^int service_notify_nodemsg(int serviceid, int id, void* msg, int sz);$/;"	p	language:C++	signature:(int serviceid, int id, void* msg, int sz)
service_notify_service	./host/host_service.c	/^service_notify_service(int serviceid, struct service_message* sm) {$/;"	f	language:C	signature:(int serviceid, struct service_message* sm)
service_notify_service	./host/host_service.h	/^int service_notify_service(int serviceid, struct service_message* sm);$/;"	p	language:C++	signature:(int serviceid, struct service_message* sm)
service_notify_time	./host/host_service.c	/^service_notify_time(int serviceid) {$/;"	f	language:C	signature:(int serviceid)
service_notify_time	./host/host_service.h	/^int service_notify_time(int serviceid);$/;"	p	language:C++	signature:(int serviceid)
service_notify_usermsg	./host/host_service.c	/^service_notify_usermsg(int serviceid, int id, void* msg, int sz) {$/;"	f	language:C	signature:(int serviceid, int id, void* msg, int sz)
service_notify_usermsg	./host/host_service.h	/^int service_notify_usermsg(int serviceid, int id, void* msg, int sz);$/;"	p	language:C++	signature:(int serviceid, int id, void* msg, int sz)
service_query_id	./host/host_service.c	/^service_query_id(const char* name) {$/;"	f	language:C	signature:(const char* name)
service_query_id	./host/host_service.h	/^int service_query_id(const char* name);$/;"	p	language:C++	signature:(const char* name)
service_query_name	./host/host_service.c	/^service_query_name(int serviceid) {$/;"	f	language:C	signature:(int serviceid)
service_query_name	./host/host_service.h	/^const char* service_query_name(int serviceid);$/;"	p	language:C++	signature:(int serviceid)
service_reload	./host/host_service.c	/^service_reload(const char* name) {$/;"	f	language:C	signature:(const char* name)
service_reload	./host/host_service.h	/^int service_reload(const char* name);$/;"	p	language:C++	signature:(const char* name)
service_reload_byid	./host/host_service.c	/^service_reload_byid(int serviceid) {$/;"	f	language:C	signature:(int serviceid)
service_reload_byid	./host/host_service.h	/^int service_reload_byid(int serviceid);$/;"	p	language:C++	signature:(int serviceid)
serviceid	./host/host_service.h	/^    int serviceid; \/\/ >= 0, will not change since loaded$/;"	m	language:C++	struct:service	access:public
serviceid	./host/host_timer.c	/^    int serviceid;$/;"	m	language:C	struct:_event	access:public
services	./host/host_reload.c	/^    int services[CACHE_MAX];$/;"	m	language:C	struct:reload_cache	access:public
services	./service/service_dispatcher.c	/^    int services[UMID_MAX]; \/\/ hold for all subscriber(service id) of msg$/;"	m	language:C	struct:dispatcher	access:public
sessionid	./host/host_service.h	/^    uint32_t sessionid;$/;"	m	language:C++	struct:service_message	access:public
sid	./host/host_node.h	/^            uint16_t sid:10;$/;"	m	language:C++	struct:host_node::__anon4::__anon5	access:public
sid	./test/test.c	/^            uint16_t sid:10;$/;"	m	language:C	struct:ID::__anon2::__anon3	access:public
sign	./host/host_remote.c	/^    int sign; $/;"	m	language:C	struct:remote	access:public
size	./base/array.h	/^    size_t size;$/;"	m	language:C++	struct:array	access:public
size	./base/stringtable.h	/^    uint32_t size;$/;"	m	language:C++	struct:stringtable	access:public
size	./host/host_node.c	/^    int size;$/;"	m	language:C	struct:_array	access:public
size	./host/host_node.c	/^    int size;$/;"	m	language:C	struct:_node_holder	access:public
size	./host/host_reload.c	/^    int size;$/;"	m	language:C	struct:reload_cache	access:public
size	./service/service_centers.c	/^    int size;$/;"	m	language:C	struct:_array	access:public
size	./service/service_gamematch.c	/^    int size;$/;"	m	language:C	struct:creating	access:public
slots	./base/freeid.h	/^    int* slots;$/;"	m	language:C++	struct:freeid	access:public
slots	./base/hashid.h	/^    struct _hashid_slot** slots;$/;"	m	language:C++	struct:hashid	typeref:struct:hashid::_hashid_slot	access:public
slots	./base/stringtable.h	/^    struct _string** slots; $/;"	m	language:C++	struct:stringtable	typeref:struct:stringtable::_string	access:public
slots	./host/host_group.c	/^    struct _slot* slots;$/;"	m	language:C	struct:host_group	typeref:struct:host_group::_slot	access:public
socket	./net/net.c	/^struct socket {$/;"	s	language:C
socket::addr	./net/net.c	/^    uint32_t addr;$/;"	m	language:C	struct:socket	access:public
socket::fd	./net/net.c	/^    socket_t fd;$/;"	m	language:C	struct:socket	access:public
socket::head	./net/net.c	/^    struct sbuffer* head;$/;"	m	language:C	struct:socket	typeref:struct:socket::sbuffer	access:public
socket::mask	./net/net.c	/^    int mask;$/;"	m	language:C	struct:socket	access:public
socket::port	./net/net.c	/^    uint16_t port;$/;"	m	language:C	struct:socket	access:public
socket::rb	./net/net.c	/^    struct netbuf_block* rb;$/;"	m	language:C	struct:socket	typeref:struct:socket::netbuf_block	access:public
socket::status	./net/net.c	/^    int status;$/;"	m	language:C	struct:socket	access:public
socket::tail	./net/net.c	/^    struct sbuffer* tail; $/;"	m	language:C	struct:socket	typeref:struct:socket::sbuffer	access:public
socket::ud	./net/net.c	/^    int ud;$/;"	m	language:C	struct:socket	access:public
socket::ut	./net/net.c	/^    int ut;$/;"	m	language:C	struct:socket	access:public
socket_t	./net/socket.h	20;"	d	language:C++
socket_t	./net/socket.h	23;"	d	language:C++
sockets	./net/net.c	/^    struct socket* sockets;$/;"	m	language:C	struct:net	typeref:struct:net::socket	access:public
socklen_t	./net/socket.h	24;"	d	language:C++
source	./host/host_service.h	/^    int source;$/;"	m	language:C++	struct:service_message	access:public
start	./service/service_benchmark.c	/^    uint64_t start;$/;"	m	language:C	struct:benchmark	access:public
start_time	./host/host_timer.c	/^    uint64_t start_time;$/;"	m	language:C	struct:host_timer	access:public
status	./net/net.c	/^    int status;$/;"	m	language:C	struct:socket	access:public
status	./world/player.h	/^    int status;$/;"	m	language:C++	struct:player	access:public
str	./base/stringtable.h	/^    char str[0];$/;"	m	language:C++	struct:_string	access:public
str	./message/user_message.h	/^    char str[0];$/;"	m	language:C++	struct:UM_cmd_res	access:public
string2array	./base/stringsplice.h	/^string2array(const char* str, char c, struct array* arr) {$/;"	f	language:C++	signature:(const char* str, char c, struct array* arr)
string2array_st	./base/stringsplice.h	/^string2array_st(const char* str, char c, struct array* arr, struct stringtable* st) {$/;"	f	language:C++	signature:(const char* str, char c, struct array* arr, struct stringtable* st)
string_new	./base/stringsplice.h	/^string_new(const char* str, size_t l) {$/;"	f	language:C++	signature:(const char* str, size_t l)
stringsplice	./base/stringsplice.h	/^struct stringsplice {$/;"	s	language:C++
stringsplice::n	./base/stringsplice.h	/^    size_t n;$/;"	m	language:C++	struct:stringsplice	access:public
stringsplice::p	./base/stringsplice.h	/^    struct _str_splice p[_STRSPLICE_MAX];$/;"	m	language:C++	struct:stringsplice	typeref:struct:stringsplice::_str_splice	access:public
stringsplice_create	./base/stringsplice.h	/^stringsplice_create(struct stringsplice* sp, size_t max, const char* str, char c) {$/;"	f	language:C++	signature:(struct stringsplice* sp, size_t max, const char* str, char c)
stringtable	./base/stringtable.h	/^struct stringtable {$/;"	s	language:C++
stringtable::size	./base/stringtable.h	/^    uint32_t size;$/;"	m	language:C++	struct:stringtable	access:public
stringtable::slots	./base/stringtable.h	/^    struct _string** slots; $/;"	m	language:C++	struct:stringtable	typeref:struct:stringtable::_string	access:public
stringtable_create	./base/stringtable.h	/^stringtable_create(uint32_t hash) {$/;"	f	language:C++	signature:(uint32_t hash)
stringtable_free	./base/stringtable.h	/^stringtable_free(struct stringtable* st) {$/;"	f	language:C++	signature:(struct stringtable* st)
stringtable_str	./base/stringtable.h	/^stringtable_str(struct stringtable* st, const char* str) {$/;"	f	language:C++	signature:(struct stringtable* st, const char* str)
stringtable_strl	./base/stringtable.h	/^stringtable_strl(struct stringtable* st, const char* str, size_t l) {$/;"	f	language:C++	signature:(struct stringtable* st, const char* str, size_t l)
subs	./message/user_message.h	/^    uint16_t subs[0];$/;"	m	language:C++	struct:UM_node_subs	access:public
subs	./service/service_centers.c	/^    struct _array subs[NODE_TYPE_MAX];$/;"	m	language:C	struct:centers	typeref:struct:centers::_array	access:public
sz	./base/memrw.h	/^    int sz;$/;"	m	language:C++	struct:memrw	access:public
sz	./host/host_remote.c	/^    size_t sz;$/;"	m	language:C	struct:remote	access:public
sz	./host/host_service.h	/^    int sz;$/;"	m	language:C++	struct:service_message	access:public
sz	./host/host_timer.c	/^    int sz;$/;"	m	language:C	struct:_event_holder	access:public
sz	./net/net.c	/^    int sz;$/;"	m	language:C	struct:sbuffer	access:public
sz	./net/netbuf.h	/^    int sz;$/;"	m	language:C++	struct:netbuf_block	access:public
tail	./net/net.c	/^    struct sbuffer* tail; $/;"	m	language:C	struct:socket	typeref:struct:socket::sbuffer	access:public
tail_socket	./net/net.c	/^    struct socket* tail_socket;$/;"	m	language:C	struct:net	typeref:struct:net::socket	access:public
test_args	./test/test.c	/^test_args() {$/;"	f	language:C
test_lur	./test/test.c	/^test_lur() {$/;"	f	language:C
test_union	./test/test.c	/^void test_union() {$/;"	f	language:C
tid	./host/host_node.h	/^            uint16_t tid:6;$/;"	m	language:C++	struct:host_node::__anon4::__anon5	access:public
tid	./test/test.c	/^            uint16_t tid:6;$/;"	m	language:C	struct:ID::__anon2::__anon3	access:public
time	./host/dlmodule.h	/^    void  (*time)(struct service* s);$/;"	m	language:C++	struct:dlmodule	access:public
timeout	./message/cli_message.h	/^    int timeout;$/;"	m	language:C++	struct:UM_playwait	access:public
tmember_brief	./message/sharetype.h	/^struct tmember_brief {$/;"	s	language:C++
tmember_brief::charid	./message/sharetype.h	/^    uint32_t charid;$/;"	m	language:C++	struct:tmember_brief	access:public
tmember_brief::name	./message/sharetype.h	/^    char name[NAME_MAX];$/;"	m	language:C++	struct:tmember_brief	access:public
tmember_detail	./message/sharetype.h	/^struct tmember_detail {$/;"	s	language:C++
tmember_detail::charid	./message/sharetype.h	/^    uint32_t charid;$/;"	m	language:C++	struct:tmember_detail	access:public
tmp	./tool/service_tmp.c	/^struct tmp {$/;"	s	language:C
tmp_create	./tool/service_tmp.c	/^tmp_create() {$/;"	f	language:C
tmp_free	./tool/service_tmp.c	/^tmp_free(struct tmp* self) {$/;"	f	language:C	signature:(struct tmp* self)
tmp_init	./tool/service_tmp.c	/^tmp_init(struct service* s) {$/;"	f	language:C	signature:(struct service* s)
tmp_net	./tool/service_tmp.c	/^tmp_net(struct service* s, struct net_message* nm) {$/;"	f	language:C	signature:(struct service* s, struct net_message* nm)
tmp_nodemsg	./tool/service_tmp.c	/^tmp_nodemsg(struct service* s, int id, void* msg, int sz) {$/;"	f	language:C	signature:(struct service* s, int id, void* msg, int sz)
tmp_service	./tool/service_tmp.c	/^tmp_service(struct service* s, struct service_message* sm) {$/;"	f	language:C	signature:(struct service* s, struct service_message* sm)
tmp_time	./tool/service_tmp.c	/^tmp_time(struct service* s) {$/;"	f	language:C	signature:(struct service* s)
tmp_usermsg	./tool/service_tmp.c	/^tmp_usermsg(struct service* s, int id, void* msg, int sz) {$/;"	f	language:C	signature:(struct service* s, int id, void* msg, int sz)
tnodeid	./message/user_message.h	/^    uint16_t tnodeid;$/;"	m	language:C++	struct:UM_node_notify	access:public
trigger_time	./host/host_timer.c	/^    uint64_t trigger_time;$/;"	m	language:C	struct:host_timer	access:public
type	./host/host_message.h	/^    int8_t type;  \/\/ see HMSGT_* define$/;"	m	language:C++	struct:host_message	access:public
type	./message/cli_message.h	/^    int8_t type; \/\/ see ROOM_TYPE*$/;"	m	language:C++	struct:UM_play	access:public
type	./message/cli_message.h	/^    int8_t type;$/;"	m	language:C++	struct:UM_logout	access:public
type	./message/user_message.h	/^    int8_t type;  \/\/ see ROOM_TYPE*$/;"	m	language:C++	struct:UM_createroom	access:public
type	./message/user_message.h	/^    int8_t type;  \/\/ sess ROOM_TYPE*$/;"	m	language:C++	struct:UM_destroyroom	access:public
type	./net/net_message.h	/^    int type;     \/\/ see NETE$/;"	m	language:C++	struct:net_message	access:public
types	./host/host_node.c	/^    struct _type* types;$/;"	m	language:C	struct:_node_holder	typeref:struct:_node_holder::_type	access:public
ud	./host/host_gate.h	/^    void* ud;$/;"	m	language:C++	struct:gate_client	access:public
ud	./net/net.c	/^    int ud;$/;"	m	language:C	struct:socket	access:public
ud	./net/net_message.h	/^    int ud;$/;"	m	language:C++	struct:net_message	access:public
ud	./net/netpoll.h	/^    void* ud;$/;"	m	language:C++	struct:np_event	access:public
ud	./net/socket_select.h	/^    void** ud; $/;"	m	language:C++	struct:np_state	access:public
um	./service/node_type.h	/^    struct UM_base* um;$/;"	m	language:C++	struct:node_message	typeref:struct:node_message::UM_base	access:public
um	./service/worldhelper.h	/^    struct UM_base* um;$/;"	m	language:C++	struct:player_message	typeref:struct:player_message::UM_base	access:public
used	./host/host_group.c	/^    int used;$/;"	m	language:C	struct:_slot	access:public
usermsg	./host/dlmodule.h	/^    void  (*usermsg)(struct service* s, int id, void* msg, int sz);$/;"	m	language:C++	struct:dlmodule	access:public
ut	./net/net.c	/^    int ut;$/;"	m	language:C	struct:socket	access:public
ut	./net/net_message.h	/^    int ut;$/;"	m	language:C++	struct:net_message	access:public
v	./test/test.c	/^    }v [3];$/;"	m	language:C	struct:Test	typeref:struct:Test::__anon1	access:public
wfds	./net/socket_select.h	/^    fd_set wfds;$/;"	m	language:C++	struct:np_state	access:public
world	./service/service_world.c	/^struct world {$/;"	s	language:C
world::chariditer	./service/service_world.c	/^    uint32_t chariditer;$/;"	m	language:C	struct:world	access:public
world_create	./service/service_world.c	/^world_create() {$/;"	f	language:C
world_free	./service/service_world.c	/^world_free(struct world* self) {$/;"	f	language:C	signature:(struct world* self)
world_init	./service/service_world.c	/^world_init(struct service* s) {$/;"	f	language:C	signature:(struct service* s)
world_nodemsg	./service/service_world.c	/^world_nodemsg(struct service* s, int id, void* msg, int sz) {$/;"	f	language:C	signature:(struct service* s, int id, void* msg, int sz)
world_service	./service/service_world.c	/^world_service(struct service* s, struct service_message* sm) {$/;"	f	language:C	signature:(struct service* s, struct service_message* sm)
world_time	./service/service_world.c	/^world_time(struct service* s) {$/;"	f	language:C	signature:(struct service* s)
wptr	./net/netbuf.h	/^    int wptr;$/;"	m	language:C++	struct:netbuf_block	access:public
wrap	./message/user_message.h	/^    struct UM_base wrap;$/;"	m	language:C++	struct:UM_forward	typeref:struct:UM_forward::UM_base	access:public
write	./net/netpoll.h	/^    bool write;$/;"	m	language:C++	struct:np_event	access:public
wtmp	./net/socket_select.h	/^    fd_set wtmp;$/;"	m	language:C++	struct:np_state	access:public
